<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xiaopc</title>
  
  <subtitle>Dev+Ops (zh-cn)</subtitle>
  <link href="https://xiaopc.org/atom.xml" rel="self"/>
  
  <link href="https://xiaopc.org/"/>
  <updated>2023-11-18T03:59:46.213Z</updated>
  <id>https://xiaopc.org/</id>
  
  <author>
    <name>xiaopc</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何用 Powershell 查 IPv6</title>
    <link href="https://xiaopc.org/2023/09/14/%E5%A6%82%E4%BD%95%E7%94%A8-powershell-%E6%9F%A5-ipv6/"/>
    <id>https://xiaopc.org/2023/09/14/%E5%A6%82%E4%BD%95%E7%94%A8-powershell-%E6%9F%A5-ipv6/</id>
    <published>2023-09-14T01:27:45.000Z</published>
    <updated>2023-11-18T03:59:46.213Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>年更 again (今年其他事情比较多，blog 没太多干货分享啦</p></blockquote><p>发现电信下发的 IPv6 连续连接十几天后会失效 (光猫路由 SLAAC 下发的，不知道是哪的问题)，重新连接就好了.</p><p>NAS 需要 IPv6 才能连接 Zerotier (没有要公网 IPv4，马上双栈公网就莫得了[1])，最简单的办法是，每天查下 IPv6, 没有就重启.</p><span id="more"></span><h2 id="获取-ipv6-的方式">1. 获取 IPv6 的方式</h2><p>第一时间大部分人都能想到，<code>curl</code> 一下 <code>ifconfig.io</code> 或者 <code>ip.sb</code> 这样.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\xiaopc&gt; curl ip.sb</span><br><span class="line">StatusCode        : 200</span><br><span class="line">Content           : 240e:****:****</span><br><span class="line">RawContent        : HTTP/1.1 200 OK</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>那如果不走 HTTP 呢？通过 EDNS Client Subnet (ECS)[2]，在 DNS 查询中递归解析器将客户端 IP 给到权威服务器，来实现地域化精细解析.</p><p>一个例子就是用 DNS 查 IP:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\xiaopc&gt; nslookup -type=TXT o-o.myaddr.l.google.com ns1.google.com</span><br><span class="line">服务器:  ns1.google.com</span><br><span class="line">Address:  2001:4860:4802:32::a</span><br><span class="line"></span><br><span class="line">o-o.myaddr.l.google.com text =</span><br><span class="line"></span><br><span class="line">        &quot;240e:****:****&quot;</span><br></pre></td></tr></table></figure><h2 id="但是怎么把地址抽出来呢">2. 但是怎么把地址抽出来呢</h2><p><code>nslookup</code> 不像 <code>dig</code>，没有 <code>+short</code>，那怎么把地址抽出来呢？</p><p>Powershell 名字里的 Power，它 Power 在哪呢？</p><p>比如说它的 builtin function:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\xiaopc&gt; Resolve-DnsName -Name o-o.myaddr.l.google.com -Server ns1.google.com -Type TXT</span><br><span class="line"></span><br><span class="line">Name                                     Type   TTL   Section    Strings</span><br><span class="line">----                                     ----   ---   -------    -------</span><br><span class="line">o-o.myaddr.l.google.com                  TXT    60    Answer     &#123;240e:****:****&#125;</span><br></pre></td></tr></table></figure><p>其实这个函数的输出是个对象 (毕竟是微软，肯定是 .NET 了)，当然，Powershell 是强类型的.</p><p>(它是个 HashTable)</p><p>可以用管道符传给 <code>Get-Member</code> 看看有什么成员:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\xiaopc&gt; (Resolve-DnsName -Name o-o.myaddr.l.google.com -Server ns1.google.com -Type TXT) | Get-Member</span><br><span class="line"></span><br><span class="line">   TypeName:Microsoft.DnsClient.Commands.DnsRecord_TXT</span><br><span class="line"></span><br><span class="line">Name         MemberType    Definition</span><br><span class="line">----         ----------    ----------</span><br><span class="line">QueryType    AliasProperty QueryType = Type</span><br><span class="line">Text         AliasProperty Text = Strings</span><br><span class="line">Equals       Method        bool Equals(System.Object obj)</span><br><span class="line">GetHashCode  Method        int GetHashCode()</span><br><span class="line">GetType      Method        type GetType()</span><br><span class="line">ToString     Method        string ToString()</span><br><span class="line">CharacterSet Property      Microsoft.DnsClient.Commands.DNSCharset CharacterSet &#123;get;set;&#125;</span><br><span class="line">DataLength   Property      uint16 DataLength &#123;get;set;&#125;</span><br><span class="line">Name         Property      string Name &#123;get;set;&#125;</span><br><span class="line">Section      Property      Microsoft.DnsClient.Commands.DNSSection Section &#123;get;set;&#125;</span><br><span class="line">Strings      Property      string[] Strings &#123;get;set;&#125;</span><br><span class="line">TTL          Property      uint32 TTL &#123;get;set;&#125;</span><br><span class="line">Type         Property      Microsoft.DnsClient.Commands.RecordType Type &#123;get;set;&#125;</span><br></pre></td></tr></table></figure><p>那么就很简单了:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\xiaopc&gt; (Resolve-DnsName -Name o-o.myaddr.l.google.com -Server ns1.google.com -Type TXT)[0].Strings[0]</span><br><span class="line">240e:****:****</span><br></pre></td></tr></table></figure><p>加上重启的判断：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (-not (Resolve-DnsName -Name o-o.myaddr.l.google.com -Server ns1.google.com -Type TXT)[0].Strings[0].StartsWith(&quot;240e&quot;)) &#123;</span><br><span class="line">  shutdown /r /t 120 /d 5:20</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：<code>5:20</code> 是关机原因—网络连接丢失(计划外)</p><h2 id="定时启动">3. 定时启动</h2><p>但是弹黑框不好看，不妨借鉴一下一些红方用的持久化方法[3].</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\xiaopc&gt; powershell /?</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">-NoExit            运行启动命令后不退出。</span><br><span class="line">-NoProfile         不加载 Windows PowerShell 配置文件。</span><br><span class="line">-NonInteractive    不向用户显示交互式提示。</span><br><span class="line">-WindowStyle       将窗口样式设置为 Normal、Minimized、Maximized 或 Hidden。</span><br><span class="line">-EncodedCommand    接受 base-64 编码字符串版本的命令。</span><br><span class="line">-Command           执行指定的命令(和任何参数)，Command 的值可以为 &quot;-&quot;、字符串或脚本块。</span><br></pre></td></tr></table></figure><p>那么最终的命令就是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell.exe -NonI -c &quot;if (-not (Resolve-DnsName -Name o-o.myaddr.l.google.com -Server ns1.google.com -Type TXT)[0].Strings[0].StartsWith(\&quot;240e\&quot;)) &#123; shutdown /r /t 120 /d 5:20 &#125;&quot;</span><br></pre></td></tr></table></figure><p>把它加到任务计划就行了.</p><p>注：在既没有 IPv4 又没有 IPv6 时（aka 断网）脚本会报错退出，这样正好满足需求.</p><hr /><p>[1] https://www.ithome.com/0/716/097.htm</p><p>[2] https://developers.google.com/speed/public-dns/docs/ecs</p><p>[3] https://www.freebuf.com/articles/system/229209.html</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;年更 again (今年其他事情比较多，blog 没太多干货分享啦&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;发现电信下发的 IPv6 连续连接十几天后会失效 (光猫路由 SLAAC 下发的，不知道是哪的问题)，重新连接就好了.&lt;/p&gt;
&lt;p&gt;NAS 需要 IPv6 才能连接 Zerotier (没有要公网 IPv4，马上双栈公网就莫得了[1])，最简单的办法是，每天查下 IPv6, 没有就重启.&lt;/p&gt;</summary>
    
    
    
    <category term="其他" scheme="https://xiaopc.org/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>水：去除 PDF 中的文字</title>
    <link href="https://xiaopc.org/2023/01/29/%E6%B0%B4-%E5%8E%BB%E9%99%A4-pdf-%E4%B8%AD%E7%9A%84%E6%96%87%E5%AD%97/"/>
    <id>https://xiaopc.org/2023/01/29/%E6%B0%B4-%E5%8E%BB%E9%99%A4-pdf-%E4%B8%AD%E7%9A%84%E6%96%87%E5%AD%97/</id>
    <published>2023-01-29T03:38:52.000Z</published>
    <updated>2023-11-18T03:59:46.213Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>新年好！</p></blockquote><p>网上下载的某些 PDF 文档，经过层层转压，里面带上了一堆水印，很是影响阅读.</p><p>对于纯图片的文档（比如翻拍的纸质书）来说，来一个简单的脚本去除文本水印即可.（图片水印就不是一个脚本能解决的了）</p><span id="more"></span><script src="https://gist.github.com/xiaopc/8d41bc588c50dd419df9aaae6584e0d7.js"></script><p>PDF 是一种页面描述语言，而 PDF 文件由文件结构、文档对象，和一系列描述内容的操作符组成. 一段显示一串 8 的操作符序列如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">BT</span><br><span class="line">/F0 192 Tf</span><br><span class="line">1 0 0 -1 0 137 Tm</span><br><span class="line">(8888888888888) Tj</span><br><span class="line">ET</span><br></pre></td></tr></table></figure><p><code>BT</code> 和 <code>ET</code> 是文本 block 开始和结束，<code>Tf</code> 操作选择字体 <code>F0</code> 字号 192pt，<code>Tm</code> 是位置矩阵，<code>Tj</code> 是字符内容. 更多操作符可参考 <a href="https://zxyle.github.io/PDF-Explained/chapter6.html">PDF Explained</a> 及标准文档.</p><p>再看这个脚本就很简单了，遍历每个页面对象，获取内容操作符列表，去掉 <code>Tj</code>.</p><p>当然，还有待完善的地方，比如去掉整个文本 block, 根据文字删除等等.</p><p>水完了~</p><hr /><p>本文参考链接已标注</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;新年好！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;网上下载的某些 PDF 文档，经过层层转压，里面带上了一堆水印，很是影响阅读.&lt;/p&gt;
&lt;p&gt;对于纯图片的文档（比如翻拍的纸质书）来说，来一个简单的脚本去除文本水印即可.（图片水印就不是一个脚本能解决的了）&lt;/p&gt;</summary>
    
    
    
    <category term="其他" scheme="https://xiaopc.org/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>如何让应用在 Android 4.4 下使用 TLSv1.3</title>
    <link href="https://xiaopc.org/2022/10/07/%E5%A6%82%E4%BD%95%E8%AE%A9%E5%BA%94%E7%94%A8%E5%9C%A8-android-4-4-%E4%B8%8B%E4%BD%BF%E7%94%A8-tlsv1-3/"/>
    <id>https://xiaopc.org/2022/10/07/%E5%A6%82%E4%BD%95%E8%AE%A9%E5%BA%94%E7%94%A8%E5%9C%A8-android-4-4-%E4%B8%8B%E4%BD%BF%E7%94%A8-tlsv1-3/</id>
    <published>2022-10-07T09:12:15.000Z</published>
    <updated>2023-11-18T03:59:46.213Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>半年更博主 ✅</p></blockquote><p>虽然现在（应该、大约）没有 Android Kitkat <code>API 19</code> 以下的新设备了，但是为了响应欧盟号召，旧设备还是要好好利用啊.</p><p>目前大多数人接触得到的这类旧设备就是机顶盒了，而旧版 Android 内置的 OpenSSL 还支持 SSLv3（有 Poodle 漏洞），而且不支持现代的 TLSv1.3（HTTP/2 必须），这会导致许多连接问题.</p><p>（不关闭 SSLv3 的话，在 Qualys SSL Test 评估会直降一级）</p><p>由于这个问题在中文互联网好像没人写（除了 Stackoverflow 采集站以外），所以就来写一下.</p><span id="more"></span><blockquote><p>如 TLDR 可直接看最后一节</p></blockquote><h2 id="java-加密套件的关系">0. Java 加密套件的关系</h2><p>Java 安全提供者 (JSP) 包括密码学扩展 (JCE) 和安全套接字扩展 (JSSE). 密码学扩展就是 OpenSSL、BoringSSL 这些密码库，安全套接字扩展则是使用密码库来处理 TLS/SSL 连接的 Client/Server 组件.</p><p>支持 TLSv1.3 的话，首先需要支持它的密码套件（比如说，加密算法必须支持 AEAD），这有赖密码学扩展支持.</p><p>而后，需要在协议握手时正确向目标提供密码套件列表（ClientHello/ServerHello），进行证书鉴别等等，然后正确完成建立连接这一系列过程，都是安全套接字扩展负责.</p><p>在 Kitkat 及以前，Android 内置的密码学扩展是 <code>openssl-1.0.1e</code>，而到 <code>1.0.2j</code> 版本才支持，内置的安全套接字扩展自然没有 TLSv1.3 的支持. [1]</p><h2 id="google-钦定的-gms-security-provider">1. Google 钦定的 GMS Security Provider</h2><p>Google 近些年才想到把系统各组件拆开更新，而对于 JSP 则是通过 GMS 来提供，随着 Play Services 一起更新.</p><p>使用 GMS 的应用可以通过 <code>com.google.android.gms.security.ProviderInstaller</code> 安装 GMS 的一揽子 Provider:</p><script src="https://gist.github.com/patrickhammond/0b13ec35160af758d98c.js"></script><p>然而，Kitkat 能安装到最新的 Play Services 版本只有 7.x，还是不够用.</p><h2 id="如果只动-jsse-netcipher">2. 如果只动 JSSE： NetCipher</h2><p>如果只为了禁用 SSLv3 且使用最优的密码套件，<a href="https://github.com/guardianproject/NetCipher">NetCipher</a> 只是修改 JSSE 的配置，几乎不会造成打包后体积变化.</p><p><code>'info.guardianproject.netcipher:netcipher'</code> 提供了一个 <code>StrongConnectionBuilder</code> 套在 <code>HttpURLConnection</code> 外面，代码改动很小.</p><p>不过，它提供适用 <code>okhttp</code> 的构件 <code>info.guardianproject.netcipher:netcipher-okhttp3</code> 目前为止有 Bug 无法正常使用，且暂无更新计划. [2]</p><h2 id="根本解决内置新版-conscrypt">3. 根本解决：内置新版 Conscrypt</h2><p><a href="https://github.com/google/conscrypt">Conscrypt</a> 是 Android 系统内置的 JSP，Google 将它独立了出来，使用自己的 BoringSSL 密码库，只需要在应用内置新版就行了.</p><p>但是不像它在 README 里说的那么简单，由于 Conscrypt 没有实现证书管理器 <code>X509ExtendedTrustManager</code> 而且也暂无更新[3]等缺失，所以需要额外实现.</p><p>适配 <code>okhttp</code> 的代码如下（后附一点点说明）；</p><script src="https://gist.github.com/Karewan/4b0270755e7053b471fdca4419467216.js"></script><ol type="1"><li><code>okhttp</code> 对 API 19 的支持到 3.12.x 版本</li><li>JSP 列表是从 1 开始编号的</li><li>若还要访问 http 地址，则在 connectionSpecs 那里增加 ConnectionSpec.CLEARTEXT</li><li>SSLContext.init 三个参数分别是 <code>KeyManager[]</code>, <code>TrustManager[]</code>, <code>SecureRandom</code>, null 时使用系统默认第一个</li></ol><hr /><p>本文参考了：</p><p>[1] https://enzowyf.github.io/android_alpn.html</p><p>[2] https://gitlab.com/guardianproject/NetCipher/-/issues/17</p><p>[3] https://github.com/google/conscrypt/issues/848</p><p>[4] https://gist.github.com/Karewan/4b0270755e7053b471fdca4419467216</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;半年更博主 ✅&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;虽然现在（应该、大约）没有 Android Kitkat &lt;code&gt;API 19&lt;/code&gt; 以下的新设备了，但是为了响应欧盟号召，旧设备还是要好好利用啊.&lt;/p&gt;
&lt;p&gt;目前大多数人接触得到的这类旧设备就是机顶盒了，而旧版 Android 内置的 OpenSSL 还支持 SSLv3（有 Poodle 漏洞），而且不支持现代的 TLSv1.3（HTTP/2 必须），这会导致许多连接问题.&lt;/p&gt;
&lt;p&gt;（不关闭 SSLv3 的话，在 Qualys SSL Test 评估会直降一级）&lt;/p&gt;
&lt;p&gt;由于这个问题在中文互联网好像没人写（除了 Stackoverflow 采集站以外），所以就来写一下.&lt;/p&gt;</summary>
    
    
    
    <category term="移动开发" scheme="https://xiaopc.org/categories/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>旧文更新：Cloudflare Workers 反代 Google Analytics</title>
    <link href="https://xiaopc.org/2022/04/04/%E6%97%A7%E6%96%87%E6%9B%B4%E6%96%B0-cloudflare-workers-%E5%8F%8D%E4%BB%A3-google-analytics/"/>
    <id>https://xiaopc.org/2022/04/04/%E6%97%A7%E6%96%87%E6%9B%B4%E6%96%B0-cloudflare-workers-%E5%8F%8D%E4%BB%A3-google-analytics/</id>
    <published>2022-04-04T03:59:20.000Z</published>
    <updated>2023-11-18T03:59:46.213Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>再写 GA 相关的内容怕是要变成 GA 小站的样子了（水平弗如，正经内容还是得看人家写的</p></blockquote><p>本月，被阿里收购的 CNZZ 正式砍掉了免费服务，百度统计免费版除基础数据以外的功能也关闭了，51.la 刚重构的 v6 突然承接到这两家的「难民」，也饱受巨大的流量冲击. 于此同时，Google Analytics 旧版「通用统计 Universal Analytics」也将于明年停止服务（统计代码以 <code>UA-</code> 开头）.</p><p>之前（还在用 WordPress 时）写的<a href="/2016/07/18/nginx-%E5%8F%8D%E4%BB%A3-google-analytics-%E5%92%8C-recaptcha-%E5%AE%9E%E8%B7%B5/">Nginx 反代 Google Analytics 和 reCaptcha 实践</a>貌似是本博客搜索量最高的文章，那么就来更新一下.</p><span id="more"></span><p>六年前大家还在自己搭环境建站，在 Serverless、边缘计算等风潮席卷后，现在当然要用最简单、最便宜的方式来做. Cloudflare Workers 可以部署 Node.js 应用（其他语言转换为 JS，但不完美）. 免费额度是每天 100000 请求，每个请求最多 10 毫秒 CPU 时间.</p><p>Cloudflare 基础使用就不赘述了，在 Dashboard 里找到 Workers 开通就好. 创建服务那里，「启动器」只是选择初始模板，随便选即可.</p><p>编辑代码为：</p><script src="https://gist.github.com/xiaopc/0602f06ca465d76bd9efd3dda9393738.js"></script><p>要编辑的就是前三个变量，按注释说明修改. 这里路由地址可以先使用分配的 <code>workers.dev</code> 地址，测试成功以后再修改过来.</p><p>先测试一下代码是否正常加载，访问 <code>https://example.workers.dev/routerpath/a.js</code>（根据变量修改为响应地址），在响应的 JS 里搜索 <code>COLLECT_PATH</code> 值，看是否成功替换.</p><p>然后按照 Google Analytics 里的说明安装统计代码，只是把 JS 地址改成上面这个. 安装后查看下页面，在 F12 Devtools 里看下有没有 POST 到 <code>COLLECT_PATH</code> 的成功 204 响应. 成功的话，就可以在 Google Analytics 的实时页面看到统计了.</p><p>接下来的可选操作是将自己的域名解析到 Worker.</p><p>如果域名是 NS 接入 Cloudflare 那就很简单了，假设域名是 <code>example.com</code> 想用 <code>subdomain.example.com</code>，若这个二级域名已经使用且经过 Cloudflare（开启了橙色云朵）即可下一步，没有的话需要设置这个二级域名为任意记录，并开启橙色云朵. 然后在 Workers 里「触发器-添加路由」添加 <code>subdomain.example.com/*</code> 即可.</p><p>如果域名是之前用 Partners 方法用 CNAME 接入的（现在 Partners 已经不能新增接入了），可以在 Partners 那边给二级域名开启橙色云朵，然后同样进行第二步操作. 其实还有一个方法，Cloudflare Pages 支持 CNAME 接入，可以创建一个空白 Pages，CNAME 到 <code>yourpages.pages.dev</code>，成功之后这个二级域名即接入了 Cloudflare 网络，那么还如前文所述一样操作即可.</p><p>当然，改完后不要忘记把 Workers 代码里的 <code>DOMAIN</code> 变量修改过来，还要更新页面安装的 JS 地址.</p><p>相比仅代理上报接口（Measurement Protocol），代理 <code>gtag.js</code> 的好处是不用自己维护这个文件的更新，且不用修改其他的代码（如使用 Google Analytics 做了自定义事件上报等等），甚至（或许可以，但未测试）支持 Tag Manager，功能更丰富. 当然缺点也显而易见，<code>gtag.js</code> 也会消耗一次请求，访问量较大时免费的请求数可能会吃紧.</p><p>最后回答为什么要反代 Google Analytics 这个问题，一方面是境内确实会有部分网络无法访问 <code>google-analytics.com</code>，个人经验而言，同时使用 GA 和其他国内统计工具，GA 的数值会低 10% 左右. 另一方面，支持 BigQuery 的 GA4 对会 SQL 的使用者而言无疑非常强大，这是其他统计工具仍无可望其项背的.</p><p>最后强调一下，反代 Google Analytics 目前（唯一？）的问题是，Measurement Protocol 现在不能手动设置来源 IP，这意味着<strong>无法获取访客地理位置、运营商</strong>等信息. 不过如果在 Workers 使用如 <code>lib-qqwry</code> 去查询 IP 库后修改上报内容，或许不失为一种权宜之策.</p><hr /><p>本文参考了：</p><p>[1] https://placeless.net/blog/faster-ga4-with-cloudflare-worker</p><p>[2] https://blog.skk.moe/post/cloudflare-workers-cfga</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;再写 GA 相关的内容怕是要变成 GA 小站的样子了（水平弗如，正经内容还是得看人家写的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本月，被阿里收购的 CNZZ 正式砍掉了免费服务，百度统计免费版除基础数据以外的功能也关闭了，51.la 刚重构的 v6 突然承接到这两家的「难民」，也饱受巨大的流量冲击. 于此同时，Google Analytics 旧版「通用统计 Universal Analytics」也将于明年停止服务（统计代码以 &lt;code&gt;UA-&lt;/code&gt; 开头）.&lt;/p&gt;
&lt;p&gt;之前（还在用 WordPress 时）写的&lt;a href=&quot;/2016/07/18/nginx-%E5%8F%8D%E4%BB%A3-google-analytics-%E5%92%8C-recaptcha-%E5%AE%9E%E8%B7%B5/&quot;&gt;Nginx 反代 Google Analytics 和 reCaptcha 实践&lt;/a&gt;貌似是本博客搜索量最高的文章，那么就来更新一下.&lt;/p&gt;</summary>
    
    
    
    <category term="devops" scheme="https://xiaopc.org/categories/devops/"/>
    
    
  </entry>
  
  <entry>
    <title>在 Webpack 中实现 LoadCSS</title>
    <link href="https://xiaopc.org/2021/06/30/%E5%9C%A8-webpack-%E4%B8%AD%E5%AE%9E%E7%8E%B0-loadcss/"/>
    <id>https://xiaopc.org/2021/06/30/%E5%9C%A8-webpack-%E4%B8%AD%E5%AE%9E%E7%8E%B0-loadcss/</id>
    <published>2021-06-30T12:13:58.000Z</published>
    <updated>2023-11-18T03:59:46.213Z</updated>
    
    <content type="html"><![CDATA[<p>「再快一点，再快一点」</p><span id="more"></span><h2 id="优化-fp-的奇技淫巧">0. 优化 FP 的奇技淫巧</h2><p>「众所周知」First Paint (白屏时间) 是评估前端体验的重要指标，减少首次渲染之前的空白时间能减少用户的焦虑感.</p><p>那么可能不「众所周知」的是，外部 (<code>&lt;link href&gt;</code>) CSS 默认是以最高优先级加载的，在其加载完成前会阻塞渲染.</p><p>所以如果为了优化 FP 做了个加载中效果，却不处理外部 CSS，结果会是 FP 没有任何减少.</p><p>(图懒得截了，略)</p><p>这就是 LoadCSS [1] 的奇妙之处了：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/path/to/my.css&quot;</span> <span class="attr">media</span>=<span class="string">&quot;print&quot;</span> <span class="attr">onload</span>=<span class="string">&quot;this.media=&#x27;all&#x27;; this.onload=null;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>media="print"</code> 的优先级会被调成 Low，且不再阻塞加载. 在其加载完成后，用 <code>onload</code> 事件把 <code>media</code> 改回来以免影响样式.</p><p>这带来了新的问题，如果外部 CSS 多的话免不了要用 LoadCSS 这个 JS 库，这又引入了新的加载延迟；此外，<code>onload</code> 事件在禁用 JS 的浏览器上无法触发，样式无法应用.</p><p>解决禁用 JS 的问题，就是 Sukka 的版本[2]了：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/path/to/my.css&quot;</span> <span class="attr">media</span>=<span class="string">&quot;print&quot;</span> <span class="attr">onload</span>=<span class="string">&quot;this.media=&#x27;all&#x27;; this.onload=null;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">noscript</span>&gt;</span><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/path/to/my.css&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(没想到吧.jpg)</p><h2 id="webpack-从哪入手">1. Webpack 从哪入手</h2><p>还有一个没解决的问题，外部 CSS 很多，如果用 Webpack 打包页面，怎样自动给每个标签都应用上 LoadCSS 呢？</p><p>哈哈，其实到这里应该能猜到，本文其实是在介绍如何写 Webpack 插件.</p><p>「众所周知」的是，从模板生成到输出文件优化这一系列操作，是 Webpack 通过各种插件和加载器来处理的.</p><p>插件在 Webpack 运行生命周期上绑定各种钩子进行操作，也可以发布自定义钩子供其他插件使用.</p><p>这里来为使用比较广泛的 <code>html-webpack-plugin</code> 插件写一个 LoadCSS 的插件.</p><h2 id="插件框架">2. 插件框架</h2><p>在 <code>html-webpack-plugin</code> 文档中，介绍了一个插件 <code>link-media-html-webpack-plugin</code>，它的作用是根据 CSS 文件名自动添加 <code>media</code> 属性。</p><p>看起来和本文的需求差不多？直接来看看它的代码 (只保留了主要逻辑)[3]：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LinkMediaHTMLWebpackPlugin</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">options</span>) &#123;</span><br><span class="line">      <span class="comment">// some initialize code</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">apply</span>(<span class="params">compiler</span>) &#123;</span><br><span class="line">    compiler.<span class="property">hooks</span>.<span class="property">compilation</span>.<span class="title function_">tap</span>(<span class="string">&#x27;LinkMediaHTMLWebpackPlugin&#x27;</span>, <span class="function">(<span class="params">compilation</span>) =&gt;</span> &#123;</span><br><span class="line">      compilation.<span class="property">hooks</span>.<span class="property">htmlWebpackPluginAlterAssetTags</span>.<span class="title function_">tap</span>(<span class="string">&#x27;LinkMediaHTMLWebpackPlugin&#x27;</span>, <span class="function">(<span class="params">htmlPluginData</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// return changed htmlPluginData</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">LinkMediaHTMLWebpackPlugin</span>;</span><br></pre></td></tr></table></figure><p>来快速查一下 [4]，再捋一捋逻辑：Webpack 启动以后会有个唯一的 <code>compiler</code> 对象，然后对每个要编译的模块走一遍 <code>compilation</code>；每次启动先调用所有注册的 <code>plugin</code> 对象 <code>apply</code> 方法来初始化. 插件用 <code>tap</code> 来绑定同步钩子，这里绑定了 <code>compiler</code> 的 <code>compilation</code> 钩子，<code>compilation</code> 的 <code>htmlWebpackPluginAlterAssetTags</code> 钩子.</p><h2 id="开始写">3. 开始写</h2><p>然后在 <code>html-webpack-plugin</code> 文档中 [5] 找到 <code>alterAssetTagGroups</code> 的定义：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">AsyncSeriesWaterfallHook</span>&lt;&#123;</span><br><span class="line">  <span class="attr">headTags</span>: <span class="title class_">Array</span>&lt;<span class="title class_">HtmlTagObject</span> | <span class="title class_">HtmlTagObject</span>&gt;,</span><br><span class="line">  <span class="attr">bodyTags</span>: <span class="title class_">Array</span>&lt;<span class="title class_">HtmlTagObject</span> | <span class="title class_">HtmlTagObject</span>&gt;,</span><br><span class="line">  <span class="attr">publicPath</span>: <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">outputName</span>: <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">plugin</span>: <span class="title class_">HtmlWebpackPlugin</span></span><br><span class="line">&#125;&gt;</span><br></pre></td></tr></table></figure><p>翻翻代码，在 [6] 找到 <code>HtmlTagObject</code> 的定义，顺便还在 [7] 找到了包装好的生成器方法.</p><p><code>html-webpack-plugin</code> 文档中的示例代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;safe-require&#x27;</span>)(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPlugin</span> &#123;</span><br><span class="line">  apply (compiler) &#123;</span><br><span class="line">    compiler.<span class="property">hooks</span>.<span class="property">compilation</span>.<span class="title function_">tap</span>(<span class="string">&#x27;MyPlugin&#x27;</span>, <span class="function">(<span class="params">compilation</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title class_">HtmlWebpackPlugin</span>.<span class="title function_">getHooks</span>(compilation).<span class="property">beforeEmit</span>.<span class="title function_">tapAsync</span>(</span><br><span class="line">        <span class="string">&#x27;MyPlugin&#x27;</span>,</span><br><span class="line">        <span class="function">(<span class="params">data, cb</span>) =&gt;</span> &#123;</span><br><span class="line">          data.<span class="property">html</span> += <span class="string">&#x27;The Magic Footer&#x27;</span></span><br><span class="line">          <span class="title function_">cb</span>(<span class="literal">null</span>, data)</span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">MyPlugin</span></span><br></pre></td></tr></table></figure><p>发现两个问题：一是之前获取 <code>html-webpack-plugin</code> 钩子的方法在新版中修改了；二是用的是 <code>tapAsync</code> 绑定的异步钩子.</p><p>修改过后的最终版本：</p><script src="https://gist.github.com/xiaopc/b92ac3384e51bfad984945d80c364bb6.js"></script><p>（只是跑通了，没有做优化，先就这样？）</p><hr /><p>本文参考了：</p><p>[1] https://github.com/filamentgroup/loadCSS</p><p>[2] https://blog.skk.moe/post/improve-fcp-for-my-blog/</p><p>[3] https://github.com/probablyup/link-media-html-webpack-plugin/blob/master/index.js</p><p>[4] https://segmentfault.com/a/1190000012840742</p><p>[5] https://github.com/jantimon/html-webpack-plugin#alterassettags-hook</p><p>[6] https://github.com/jantimon/html-webpack-plugin/blob/main/typings.d.ts#L260</p><p>[7] https://github.com/jantimon/html-webpack-plugin/blob/main/lib/html-tags.js</p><p>[8] https://juejin.cn/post/6844903713312604173</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;「再快一点，再快一点」&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://xiaopc.org/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>GA4 剩下的用 BigQuery 去补足</title>
    <link href="https://xiaopc.org/2021/05/08/ga4-%E5%89%A9%E4%B8%8B%E7%9A%84%E7%94%A8-bigquery-%E5%8E%BB%E8%A1%A5%E8%B6%B3/"/>
    <id>https://xiaopc.org/2021/05/08/ga4-%E5%89%A9%E4%B8%8B%E7%9A%84%E7%94%A8-bigquery-%E5%8E%BB%E8%A1%A5%E8%B6%B3/</id>
    <published>2021-05-08T07:53:58.000Z</published>
    <updated>2023-11-18T03:59:46.209Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="/2021/03/14/用-google-analytics-4-和-google-tag-manager-能玩出什么花样/">用 Google Analytics 4 和 Google Tag Manager 能玩出什么花样</a>一文中谈到，GA4 的分析功能目前还不够强大，那么就直接把「原始数据」倒出来分析吧。</p><span id="more"></span><h2 id="数据长什么样">0. 数据长什么样</h2><p>前文说到，GA4 的全部回报均为事件驱动，那么数据就是一系列事件组成的集合，每个事件有一定的属性...</p><p>这不就是结构化数据嘛，结构化数据查询语言是... SQL 啊...</p><p>GA4 给到的原始数据表就是这样的：</p><figure><img src="/images/bigquery_0.png" alt="" /><figcaption>表结构</figcaption></figure><figure><img src="/images/bigquery_1.png" alt="" /><figcaption>数据示例</figcaption></figure><p>不过看起来和传统关系型数据库有一点点不一样，这个下面再说.</p><h2 id="开始设置转发">1. 开始设置转发</h2><p>打开 GA4 的管理 - BigQuery 关联，点击「关联」.</p><figure><img src="/images/bigquery_2.png" alt="" /><figcaption>关联向导</figcaption></figure><p>点击「选择一个 BigQuery 项目」，勾选一个 BigQuery 项目.</p><p>没有 BigQuery 项目，或是勾选后提示「所选的 Google Cloud 项目未启用 BigQuery API」怎么办呢？</p><p>那你一定没开通 Google Cloud 吧.</p><p>但不想开通（不想浪费掉新用户免费试用）怎么办呢？开一个 Firebase 就有了。</p><p>（不需要的可以跳过下一节）</p><h2 id="白嫖-firebase">2. 白嫖 Firebase</h2><p>Firebase 是 Google 的开发者平台，由于「混乱的大公司」问题，它并没有被合并到云服务部门，而且它还送独立的云服务资源.</p><p>打开 <a href="https://firebase.google.com">Firebase</a>，创建一个免费的项目（这里就不截图了）.</p><p>侧边栏齿轮 - Project Settings - Integrations - BigQuery：</p><figure><img src="/images/bigquery_3.png" alt="" /><figcaption>Linking Firebase to BigQuery</figcaption></figure><p>这里写到，免费版提供的 BigQuery 是沙箱，只保留 60 天数据，最大 10GB.</p><p>然后点 Continue 继续，在第二步所有的选项都不勾选（可以看到，基本上提供的都是 App 开发服务），然后点 Link to BigQuery.</p><p>显示可用空间 10GB 就表示已经完成了.</p><h2 id="完成配置转发">3. 完成配置转发</h2><p>回到刚才的 GA4 关联向导，这时就可以选刚才创建的 Firebase 项目提供的那个.</p><p>数据位置随便选，多个项目关联到同一个 BigQuery 的话，位置必须选一样的. 然后下一步.</p><figure><img src="/images/bigquery_4.png" alt="" /><figcaption>配置设置</figcaption></figure><p>勾选「每天」，当然付费用户可以选择流式.</p><p>每天的导出时间大概在 GMT 零点后，也就是北京时间早上八点.</p><p>点下一步，提交，配置转发就完成了，接下来就是等第二天看数据.</p><h2 id="bigquery-初上手">4. BigQuery 初上手</h2><p>那么哪里才能找到 BigQuery 呢？当然是 Google Cloud 了.</p><p>Google Cloud 用户可以在导航栏的 Big Data 类目找到，也可以通过 <a href="https://console.cloud.google.com/bigquery">https://console.cloud.google.com/bigquery</a> 直接进入.</p><figure><img src="/images/bigquery_5.png" alt="" /><figcaption>BigQuery 界面</figcaption></figure><p>左边栏是功能及数据集树状图，右边分别是查询语句输入和查询结果窗格，和传统数据库客户端基本一样.</p><p>它的 SQL 也是标准的 SQL 语言，符合 SQL 2011 标准，<a href="https://cloud.google.com/bigquery/docs/reference/standard-sql/migrating-from-legacy-sql?hl=zh-cn">有问题可以查官方文档</a>.</p><p>（之前 BigQuery 用的不是标准 SQL，遗留问题不必管他）</p><p>数据的层次是项目-数据集-表，也很像. 数据集默认命名是 <code>analytics_统计ID</code>，表就是 <code>events_</code>.</p><p>（这里是把每日的 <code>events_日期</code> 表合并显示了）</p><p>选中 <code>events_</code> 表，点 Query Table 会自动写当前表的 <code>SELECT FROM</code> 语句.</p><figure><img src="/images/bigquery_6.png" alt="" /><figcaption>SELECT FROM</figcaption></figure><p>可以看到，有语法检查. 这个语法检查有两个层级，一是语法检查，二是结合数据表检查.</p><p>（对真大数据玩家来说，可以节约一点时间）</p><h2 id="实测统计跳出">4. 实测：统计跳出</h2><p>统计跳出站外的链接这个需求，很少有统计系统去做.</p><p>GA4 里明明能看到 <code>click</code> 事件，还能在实时监控里看到最近的 <code>link_url</code> 事件属性，然而在统计里就是调不出来.</p><p>所有指标里就是没有这个属性，把这个属性设置自定义指标也拿不到数据，这就令人难受了.</p><p>（如果有调出来的方法的话可以留言）</p><p>那就只能用 BigQuery 看看.</p><p>但是，如果写一个这样的 SQL 查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> event_params </span><br><span class="line">  <span class="keyword">FROM</span> `project.analytics_id.events_date`</span><br><span class="line">  LIMIT <span class="number">100</span></span><br></pre></td></tr></table></figure><p>会得到 event_params.key, event_params.value.string_value, event_params.value.int_value, event_params.value.float_value, event_params.value.double_value 这些项.</p><p>然而用点号访问，例如 <code>event_params.value.string_value</code>，会得到一个错误：</p><blockquote><p>Cannot access field value on a value with type ARRAY&lt;STRUCT&lt;key STRING, value STRUCT&lt;string_value STRING, int_value INT64, float_value FLOAT64, ...&gt;&gt;&gt;</p></blockquote><p>event_params 被定义为嵌套了数组（ARRAY）和结构体（STRUCT）的数据，ARRAY 包括每个属性，每个属性有属性名和属性值，属性值还分 string/int/float...</p><p>啊，这就难到学老版本 SQL 标准的了. 不过感谢万能的 StackOverflow，文末的参考链接给出了一个辅助函数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> TEMP <span class="keyword">FUNCTION</span> paramValueByKey(k STRING, params <span class="keyword">ARRAY</span><span class="operator">&lt;</span>STRUCT<span class="operator">&lt;</span>key STRING, <span class="keyword">value</span> STRUCT<span class="operator">&lt;</span>string_value STRING, int_value INT64, float_value FLOAT64, double_value FLOAT64 <span class="operator">&gt;&gt;</span><span class="operator">&gt;</span>) <span class="keyword">AS</span> (</span><br><span class="line">  (<span class="keyword">SELECT</span> x.value <span class="keyword">FROM</span> <span class="built_in">UNNEST</span>(params) x <span class="keyword">WHERE</span> x.key<span class="operator">=</span>k)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>定义了一个临时函数（每次请求都要定义）<code>paramValueByKey('属性名', event_params)</code>，取出这个属性.</p><p>那么，统计 <code>click</code> 事件的 <code>link_url</code> 的次数就可以这么写：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> url, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> count </span><br><span class="line">  <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> paramValueByKey(<span class="string">&#x27;link_url&#x27;</span>, event_params).string_value <span class="keyword">AS</span> url </span><br><span class="line">          <span class="keyword">FROM</span> `project.analytics_id.events_date` </span><br><span class="line">          <span class="keyword">WHERE</span> event_name<span class="operator">=</span>&quot;click&quot;</span><br><span class="line">        )</span><br><span class="line">  <span class="keyword">GROUP</span> <span class="keyword">BY</span> url</span><br><span class="line">  <span class="keyword">ORDER</span> <span class="keyword">BY</span> count <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p>前面跟上辅助函数的实现，提交，就有了.</p><figure><img src="/images/bigquery_7.png" alt="" /><figcaption>结果</figcaption></figure><p>点击 Save Results 可以把结果导出到本地或者 Google Drive.</p><hr /><p>本文参考了：</p><p>https://stackoverflow.com/questions/41090396/how-to-select-multiple-custom-firebase-event-parameters-in-bigquery</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在&lt;a href=&quot;/2021/03/14/用-google-analytics-4-和-google-tag-manager-能玩出什么花样/&quot;&gt;用 Google Analytics 4 和 Google Tag Manager 能玩出什么花样&lt;/a&gt;一文中谈到，GA4 的分析功能目前还不够强大，那么就直接把「原始数据」倒出来分析吧。&lt;/p&gt;</summary>
    
    
    
    <category term="devops" scheme="https://xiaopc.org/categories/devops/"/>
    
    
  </entry>
  
  <entry>
    <title>奇怪的渲染</title>
    <link href="https://xiaopc.org/2021/04/18/%E5%A5%87%E6%80%AA%E7%9A%84%E6%B8%B2%E6%9F%93/"/>
    <id>https://xiaopc.org/2021/04/18/%E5%A5%87%E6%80%AA%E7%9A%84%E6%B8%B2%E6%9F%93/</id>
    <published>2021-04-18T03:34:08.000Z</published>
    <updated>2023-11-18T03:59:46.213Z</updated>
    
    <content type="html"><![CDATA[<p>为什么从其他转前端会觉得前端很难？也许是因为各种奇怪的 CSS Hacks 吧。</p><span id="more"></span><h2 id="动效残影与图层">0. 动效残影与图层</h2><p>给一个 <code>&lt;td&gt;</code> 的 <code>:hover</code> 伪类随便写点 <code>transition</code> 过渡就可能遇到这样的情况：</p><figure><img src="/images/css_hacks_0.gif" alt="" /><figcaption>残影</figcaption></figure><p>但是，如果同时加了一点 3D 效果，比如 <code>translateZ(0)</code>，问题就又消失了。</p><p>如果看一遍 DevTools 的性能面板，就能知道区别在哪：</p><figure><img src="/images/css_hacks_1.png" alt="" /><figcaption>未加 3D 前</figcaption></figure><figure><img src="/images/css_hacks_2.png" alt="" /><figcaption>加了 3D 后</figcaption></figure><p>没有 3D 效果时，重绘 (repaint) 的图层 (layer) 是整个文档；而有 3D 效果时，这个节点会被独立成一个图层进行渲染。</p><p>打开 DevTools - More tools - Layers 或是在 Rendering 工具里勾选 Layer Borders 即可验证。</p><p>当然，<code>translateZ(0)</code> 会有一些副作用，所以一般会用 <code>backface-visibility: hidden</code> 这个本来用来控制 3D 元素背部可见性的属性来达到同样的效果。</p><h2 id="消失的底边">1. 消失的底边</h2><p>但是这带来了一个问题，底边没了：</p><figure><img src="/images/css_hacks_3.png" alt="" /><figcaption>底边没了</figcaption></figure><p>如果给底边单独设双倍的高度，则可以正常显示。那么问题很明显，就是边框高度溢出了图层。</p><p>但是，这问题没有一致性，几乎一致的几个表格，不一定哪个会出现。</p><p>不过，打开 Layer Borders 可以发现一个规律：</p><figure><img src="/images/css_hacks_4.png" alt="" /><figcaption>图层紧贴的话反而能正常显示</figcaption></figure><p>回想之前的动效残留，可以发现这其实是同一问题。那么最简单的解决方案就是：</p><p>增大图层范围。这里增加一个 <code>box-shadow</code> 来撑开图层。</p><figure><img src="/images/css_hacks_5.gif" alt="" /><figcaption>box-shadow</figcaption></figure><p>这时，如果把之前加的 <code>backface-visibility: hidden</code> 去掉，会发现它已经不再被需要了。</p><h2 id="要开始变形了">2. 「要开始变形了」</h2><p>但是「众所周知」的是，<code>box-shadow</code> 会吃渲染性能的（尤其是没有优化的低版本浏览器）。</p><p>而如果去掉强制独立图层的话，整页渲染加上 <code>box-shadow</code> 无疑会降低性能。</p><p>这时候就要 <code>will-change</code> 属性，预先告诉浏览器，该元素将会对哪个属性添加动效。</p><p>浏览器支持方面，Chrome 和 Firefox 版本均为 36+。</p><h2 id="避免重绘">3. 避免重绘</h2><p>即便预告了 <code>box-shadow</code>，但优化还是很有限，因为毕竟还有重绘的过程。</p><p>那么 <code>box-shadow</code> 可以不重绘吗？</p><p>给 <code>::after</code> 伪元素画上盒阴影，然后用 <code>opacity</code> 隐藏掉，待需要时再显示。</p><figure><img src="/images/css_hacks_6.png" alt="" /><figcaption>没有重绘</figcaption></figure><p><code>opacity</code> 改变的元素，会被单独放在一个图层，而且透明度改变的性能成本较低。</p><figure><img src="/images/css_hacks_7.gif" alt="" /><figcaption>伪元素的图层</figcaption></figure><p>不过，这样就没法用来解决第一个问题了。</p><p>所以结论就是，<code>&lt;table&gt;</code> 已经没人要用了 ≡(▔﹏▔)≡</p><hr /><p>本文参考了：</p><p>[1] https://stackoverflow.com/questions/28511539/the-underlying-magic-of-webkit-backface-visibility</p><p>[2] https://www.barretlee.com/blog/2015/10/14/a-incredible-bug-in-taobao-homepage/</p><p>[3] https://www.zhangxinxu.com/wordpress/2015/11/css3-will-change-improve-paint/</p><p>[4] https://juejin.cn/post/6844903584077889544</p><p>[5] https://segmentfault.com/a/1190000011337088</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;为什么从其他转前端会觉得前端很难？也许是因为各种奇怪的 CSS Hacks 吧。&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://xiaopc.org/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>用 Google Analytics 4 和 Google Tag Manager 能玩出什么花样</title>
    <link href="https://xiaopc.org/2021/03/14/%E7%94%A8-google-analytics-4-%E5%92%8C-google-tag-manager-%E8%83%BD%E7%8E%A9%E5%87%BA%E4%BB%80%E4%B9%88%E8%8A%B1%E6%A0%B7/"/>
    <id>https://xiaopc.org/2021/03/14/%E7%94%A8-google-analytics-4-%E5%92%8C-google-tag-manager-%E8%83%BD%E7%8E%A9%E5%87%BA%E4%BB%80%E4%B9%88%E8%8A%B1%E6%A0%B7/</id>
    <published>2021-03-14T07:54:39.000Z</published>
    <updated>2023-11-18T03:59:46.213Z</updated>
    
    <content type="html"><![CDATA[<p>前几天突然有网页统计的需求，就找了下以前很流行的网页统计工具.</p><p>结果发现，CNZZ 被友盟收购、再被阿里收购以后就从来没更新过了；</p><p>腾讯统计悄无声息地下线了（有个站用着，现在才发现 orz）；</p><p>51.la 的管理页面还挂着一堆灰产的广告（马上要上的新版，终于加了页面内行为统计等等这些早就该有的功能）；</p><p>百度统计好歹还能跟得上时代（只有它能拿到百度过来流量的关键词），但是分析功能要花钱钱...</p><p>那么，「yyds」Google Analytics 呢？</p><span id="more"></span><h2 id="google-analytics-4-tag-manager">0. Google Analytics 4 / Tag Manager</h2><p>2020 年 10 月 Google 把应用分析和网页分析合并，推出了 Google Analytics 4. 它基于新的 <code>gtag.js</code> 框架，整合了 Google 所有分析、广告等服务.</p><figure><img src="/images/ga_gtm_0.0.png" alt="" /><figcaption>GA4 首页</figcaption></figure><figure><img src="/images/ga_gtm_0.2.png" alt="" /><figcaption>旧版首页</figcaption></figure><figure><img src="/images/ga_gtm_0.1.png" alt="" /><figcaption>GA4 实时</figcaption></figure><figure><img src="/images/ga_gtm_0.3.png" alt="" /><figcaption>旧版实时</figcaption></figure><p>v4 有几个好：</p><ol type="1"><li><p>可以选择通过 Google Signal 将多端打通进行分析（开启后国内流量会因为无法访问 <code>analytics.google.com</code> 而无法加载）；</p></li><li><p>管理控制台简化了逻辑，增强了自定义可视化分析能力；</p></li><li><p>不再基于 session（因应隐私保护要求提高），全部回报均为事件驱动；</p></li><li><p>全量数据可以导出至 Big Query.</p></li></ol><p>Tag Manager（跟踪代码管理器）用来统一管理所有的第三方代码，只需要在页面中添加 Tag Manager 就可以动态设置接入的服务，还可以通过配置各种自定义代码来进行针对性的信息收集. 比如支持将 SPA 化为常规页面进行跟踪，收集自定义事件，定时回报等操作.</p><figure><img src="/images/ga_gtm_0.4.png" alt="" /><figcaption>GTM 工作区</figcaption></figure><figure><img src="/images/ga_gtm_0.5.png" alt="" /><figcaption>支持多用户协作和版本控制</figcaption></figure><p>用 Google Analytics 和 Tag Manager 可能有两个问题，一是国内可能（概率性）由于众所周知的原因无法加载 JS，二是（有的）广告拦截可能直接把 Tag Manager 直接拦截掉，从而使全部代码失效.</p><p>如果不需要考虑这两点，那么就继续吧.</p><h2 id="安装和配置">1. 安装和配置</h2><p>在管理菜单，旧版 Analytics（现称 Universal Analytics）会提供一个「GA4 设置助理」，可以自动配置新的「GA4 媒体资源」.</p><figure><img src="/images/ga_gtm_1.0.png" alt="" /><figcaption>GA4 设置助理</figcaption></figure><p>可以通过只部署新版/旧版统计代码，将数据转发至旧版/新版 Analytics（参考链接 1）.</p><p>简单起见，这里使用建立新的 GA4 媒体资源. 现在默认流程创建的是 GA4 版，如需旧版需要在高级选项里选中「创建 Universal Analytics 媒体资源」.</p><figure><img src="/images/ga_gtm_1.1.png" alt="" /><figcaption>建立媒体资源</figcaption></figure><p>创建 GA4 媒体资源后，添加网站「数据流」.</p><figure><img src="/images/ga_gtm_1.2.png" alt="" /><figcaption>添加数据流</figcaption></figure><figure><img src="/images/ga_gtm_1.3.png" alt="" /><figcaption>网站数据流</figcaption></figure><p>GA4 的「测量 ID」是以 <code>G-</code> 开头的，而旧版的「跟踪 ID」是以 <code>UA-</code> 开头的.</p><p>不急着添加页面内代码，因为接下来要用 Tag Manager 配置.</p><p>在 Analytics 左上角的账号切换菜单里，切换到跟踪代码管理器，创建账号，同时配置一个 Web「容器」.</p><figure><img src="/images/ga_gtm_1.4.png" alt="" /><figcaption>创建容器</figcaption></figure><p>容器创建以后，这个需要在 <code>head</code> 和 <code>body</code> 里添加的代码才是需要部署的.</p><p>在工作区中「新建代码」，选择「GA4 配置」，填入测量 ID，勾选发送浏览事件. 保存以后提交版本，统计就上线部署了.</p><figure><img src="/images/ga_gtm_1.5.png" alt="" /><figcaption>新建代码</figcaption></figure><h2 id="统计国内特色小尾巴">2. 统计国内特色「小尾巴」</h2><p>以前做数字营销的，以及现在做「出海」增长的应该熟稔 Google Analytics 用来进行流量跟踪的 <code>UTM 参数</code>，不了解的可以见参考链接 2.</p><p>简言之是在 HTTP GET 参数里添加 <code>utm_source</code> <code>utm_medium</code> <code>utm_campaign</code> <code>utm_content</code> 这些参数来区分用户渠道，目前算是通用的标记形式.</p><p>但是国内市场上，每家都会搞自己的来源标记，像是微信分享出去的链接会加上 <code>from=groupmessage&amp;isappinstalled=0</code> 这类参数，支付宝分享出去的会带 <code>chInfo=ch_share__chsub_ALPContact</code> 这样的.</p><p>那么怎么根据这些「小尾巴」区分流量来源呢？在旧版 Analytics 中，可以通过手动设定自定义渠道实现（参考链接 3）； 或是在 Tag Manager 生成 UTM 参数，直接设置为 Analytics 的参数（参考链接 4）.</p><p>这里在 Analytics 4 中实现后一种方法.</p><p>Tag Manager 有三个核心概念：代码、触发器和变量. 代码顾名思义，插入页面中用来执行某一动作；触发器可以感知用户操作、Javascript Event 等等；变量则是声明 Tag Manager 配置文件里的变量是从哪里获取.</p><p>此外 Tag Manager 还提供了模板功能，可以从模板社区中获得自定义的代码和触发器.</p><p>这里用到了 <code>URL Parser</code> 这个变量模板，作用是从 URL 中提取需要的片段. 其本质是一个自定义 Javascript 函数（等下就会用到）.</p><figure><img src="/images/ga_gtm_1.7.png" alt="" /><figcaption>社区模板库</figcaption></figure><p>添加了这个变量模板以后，开始创建需要的变量.</p><p>首先需要提取出分享参数，这里以支付宝的 <code>chInfo</code> 参数为例. 在「变量」中，先配置内部变量，勾选「Page URL」. 然后创建用户变量，类型为 <code>URL Parser</code>，按下图配置. 带双花括号的是变量，可以通过输入框右边的快捷选中按钮添加.</p><figure><img src="/images/ga_gtm_1.8.png" alt="" /><figcaption>提取 GET 参数</figcaption></figure><p>这个变量的作用是，将 <code>&#123;&#123;Page URL&#125;&#125;</code> 中名为 <code>chInfo</code> 的请求参数的值提取出来.</p><p>同样的方法，再创建一个变量用来提取 <code>&#123;&#123;Page URL&#125;&#125;</code> 中的 <code>utm_campaign</code>，变量命名为 <code>Get utm_campaign</code>.</p><p>创建一个变量，类型为「自定义 Javascript」，代码如下:</p><figure><img src="/images/ga_gtm_1.9.png" alt="" /><figcaption>新的 utm_campaign</figcaption></figure><p>代码很简单，就是如果 URL 自带 <code>utm_campaign</code> 就返回原来的值，否则就返回 <code>chInfo</code> 参数的值.</p><p>以此类推，按照同样的方法可以自定义 <code>utm_source</code> <code>utm_medium</code> 这些参数.</p><p>最后，在原来的 GA4 配置中，设置字段名称覆盖默认值. 这里要注意，Analytics 4 使用的字段名与旧版的小写驼峰有所不同（旧版的见参考链接 5），目前还没找到官方文档.（一个方法是查看已统计数据中的字段名）</p><figure><img src="/images/ga_gtm_1.6.png" alt="" /><figcaption>GA4 配置</figcaption></figure><p>上线以后，有新流量以后就可以在 Analytics 4 的「流量获取」里看到来源了.</p><h2 id="收集前端-apm-数据">3. 收集前端 APM 数据</h2><p>应用性能管理（Application Performance Management）在前端中的落地，主要是收集连接速度、元素渲染时间及资源消耗和运行错误这些数据，从而为前端性能优化提供参考.</p><p>不过现在各家的前端 APM 好像没有免费的，不如就用 Analytics 4 + Tag Manager 来实现一个简单的性能收集.</p><p>旧版 Analytics 其实也有速度统计，不过默认只抽样 1% 统计统计打开时间（可以修改，见参考链接 6），而且有最大样本数限制.</p><p>而 Analytics 4 所有数据均使用事件机制获取，事件种类最高 500 种，没有总量限制. 这里使用一个事件来收集性能信息.</p><p>先添加一个窗口加载就触发的触发器.</p><figure><img src="/images/ga_gtm_2.0.png" alt="" /><figcaption>窗口加载触发器</figcaption></figure><p>然后创建一段代码，类型是「自定义 HTML」，它会在页面中插入这段 HTML. 这里写一段被 <code>&lt;script&gt;</code> 标签包裹起来的 Javascript 代码，完整代码可以参考 <a href="https://gist.github.com/sgelob/110581ed66cf49a6d6c3b7ac33cdc17c">这里</a>.</p><p>大致上是使用 <code>Performance API</code> 获取性能数据（用法可以参考 MDN 或者参考链接 7），创建一个包含数据的事件，然后用 <code>dataLayer.push</code> 送到 Tag Manager 的数据层.</p><figure><img src="/images/ga_gtm_2.1.png" alt="" /><figcaption>性能测试代码</figcaption></figure><p>然后为数据层中需要上报的参数添加对应的「数据层变量」.</p><figure><img src="/images/ga_gtm_2.2.png" alt="" /><figcaption>添加数据层变量</figcaption></figure><p>添加一个触发器，类型是「自定义事件」，事件名是刚才 push 到数据层的事件.</p><figure><img src="/images/ga_gtm_2.3.png" alt="" /><figcaption>添加自定义事件触发器</figcaption></figure><p>最后，新建一个代码，类型为「GA4 事件」，选择之前的 GA4 配置，把所有的数据层变量添加进来.</p><figure><img src="/images/ga_gtm_2.4.png" alt="" /><figcaption>添加 GA4 事件代码</figcaption></figure><p>Tag Manager 提供了一个测试工具 Tag Assistant，只需要点击「提交」旁边的「预览」按钮就可以开始本地测试.</p><figure><img src="/images/ga_gtm_2.5.png" alt="" /><figcaption>Tag Assistant</figcaption></figure><p>在 Tag Manager 测试时，Analytics 4 新增的 DebugView 也会同时启用，可以查看实时事件及接收到的数据.</p><figure><img src="/images/ga_gtm_2.7.png" alt="" /><figcaption>DebugView</figcaption></figure><p>接下来对 Analytics 4 收到的数据进行一些配置. 在「自定义定义 - 自定义指标」里为对应的参数设置名称.（自定义定义/指标一旦设置就不能彻底删除，只能选择归档）</p><figure><img src="/images/ga_gtm_2.6.png" alt="" /><figcaption>自定义指标</figcaption></figure><p>在「分析」里可以添加自定义视图来对数据进行分析.</p><p>新建一个「探索」视图，图表选择表格，行可以在「维度」里选择，这里选择主机名和网页标题； 值可以在「指标」里选择，这里就选择事件数以及刚才定义的性能指标；过滤器设置为事件名完全匹配.</p><figure><img src="/images/ga_gtm_2.8.png" alt="" /><figcaption>分析视图</figcaption></figure><p>这里可能会发现一个问题，这里性能指标是所有样本的和，而不是更有意义的统计值.</p><p>解决办法嘛有两个，一是将在「管理 - BigQuery 关联」里配置，将原始数据导出至 Google Cloud BigQuery 进行分析，二是在视图右上角将视图导出到 Google Sheets（属于 Google Docs）进行分析.</p><figure><img src="/images/ga_gtm_2.9.png" alt="" /><figcaption>导出到表格</figcaption></figure><p>也希望 Analytics 4 以后增加一些统计选项，直接 out-of-box 即用.</p><hr /><p>本文参考了：</p><p>[1] https://www.ichdata.com/docs/google-analytics-4/ga4%e7%9a%84%e5%b8%83%e7%bd%b2%e4%b8%8e%e8%b0%83%e4%bc%98/%e8%bd%ac%e5%8f%91%e5%b8%83%e7%bd%b2%e6%b3%95</p><p>[2] https://zhuanlan.zhihu.com/p/86453662</p><p>[3] https://www.ichdata.com/how-to-identify-wechat-traffic-in-google-analytics.html</p><p>[4] https://www.seerinteractive.com/blog/how-to-alter-your-campaign-values-using-google-tag-manager/</p><p>[5] https://developers.google.com/analytics/devguides/collection/analyticsjs/field-reference</p><p>[6] https://developers.google.com/analytics/devguides/collection/analyticsjs/user-timings</p><p>[7] https://serverless-action.com/fontend/fe-optimization/</p><p>[8] https://github.com/mikeg-de/HTML5-Performance-API-GTM-Script</p><p>[9] https://www.youtube.com/watch?v=nyD54NEn0ac</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;前几天突然有网页统计的需求，就找了下以前很流行的网页统计工具.&lt;/p&gt;
&lt;p&gt;结果发现，CNZZ 被友盟收购、再被阿里收购以后就从来没更新过了；&lt;/p&gt;
&lt;p&gt;腾讯统计悄无声息地下线了（有个站用着，现在才发现 orz）；&lt;/p&gt;
&lt;p&gt;51.la 的管理页面还挂着一堆灰产的广告（马上要上的新版，终于加了页面内行为统计等等这些早就该有的功能）；&lt;/p&gt;
&lt;p&gt;百度统计好歹还能跟得上时代（只有它能拿到百度过来流量的关键词），但是分析功能要花钱钱...&lt;/p&gt;
&lt;p&gt;那么，「yyds」Google Analytics 呢？&lt;/p&gt;</summary>
    
    
    
    <category term="devops" scheme="https://xiaopc.org/categories/devops/"/>
    
    
  </entry>
  
  <entry>
    <title>Serverless 写 Telegram Bot? 白嫖 IBM Cloud (3)</title>
    <link href="https://xiaopc.org/2020/12/27/serverless-%E5%86%99-telegram-bot-%E7%99%BD%E5%AB%96-ibm-cloud-3/"/>
    <id>https://xiaopc.org/2020/12/27/serverless-%E5%86%99-telegram-bot-%E7%99%BD%E5%AB%96-ibm-cloud-3/</id>
    <published>2020-12-27T11:15:50.000Z</published>
    <updated>2023-11-18T03:59:46.209Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>2023-11-18 update: 三年后 IBM Cloud 砍了云函数业务，本文可以不用看了</p></blockquote><p>最后来一些<a href="https://zh.wikipedia.org/wiki/%E5%86%B7%E7%9F%A5%E8%AD%98">豆知识</a>收尾。</p><span id="more"></span><h2 id="使用-cloud-function-可能会遇到的问题">9. 使用 Cloud Function 可能会遇到的问题</h2><ol type="1"><li>如果依赖里有需要编译二进制 <code>.so</code> 的 packages，务必在与 Cloud Function 容器相同的环境下安装到 virtualenv。 （否则会遇到诸如 <code>ModuleNotFoundError</code> 这种问题[1]）</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ’python:3.7‘ 环境目前是:</span></span><br><span class="line"></span><br><span class="line">os.uname() == [<span class="string">&quot;Linux&quot;</span>, <span class="string">&quot;action&quot;</span>, <span class="string">&quot;4.4.0-197-generic&quot;</span>, <span class="string">&quot;#229-Ubuntu SMP Wed Nov 25 11:05:42 UTC 2020&quot;</span>, <span class="string">&quot;x86_64&quot;</span>]</span><br><span class="line">sys.version == <span class="string">&quot;3.7.9 (default, Sep 10 2020, 17:09:36) \n[GCC 8.3.0]&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>针对 Python 版本问题，一个解决方法是：</p><ol type="a"><li><p>安装 <a href="https://github.com/pyenv/pyenv">pyenv</a>;</p></li><li><p>安装编译 Python 所需依赖[2];</p></li><li><p>安装对应版本的 Python（从 python.org 下载安装包太慢的话，自行下载放至 pyenv 的 <code>cache</code> 目录下即可）;</p></li><li><p>安装 virtualenv（<code>pyenv-virtualenv</code> 插件生成的 virtualenv 没有 <code>bin/active_this.py</code>）;</p></li><li><p>按照之前的步骤创建 virtualenv.</p></li></ol><p>或者用 <a href="https://github.com/apache/openwhisk/blob/master/docs/actions-python.md#packaging-python-actions-with-a-virtual-environment-in-zip-files">Docker 的解决方法</a>，这里还有写默认环境有哪些 packages。</p></blockquote><ol start="2" type="1"><li><p>因为只需要 <code>active_this.py</code>，所以 <code>virtualenv/bin/</code> 下 <code>python*</code> 的二进制软链接其实没用。 在 <code>zip</code> 打包时可以加 <code>-y</code> 参数，只打包软链接而不是二进制文件。（可减少 10MB+ 体积）</p></li><li><p>Cloud Function 上传 zip 包最大限制为 50MB。（fyi, numpy 就超了）</p></li><li><p>通过公开 RESTful API 执行函数，出错时客户端得到的代码并不是 「激活标志」，需要到日志查看。</p></li><li><p>通过公开 RESTful API 执行函数，传给 <code>main</code> 的 <code>dict</code> 里还有 <code>__ow_body</code>, <code>__ow_query</code> 等内容，<a href="https://github.com/apache/openwhisk/blob/master/docs/webactions.md#http-context">详见这里</a>。</p></li></ol><h2 id="写-telegram-bot-时可能会遇到的问题">10. 写 Telegram Bot 时可能会遇到的问题</h2><ol type="1"><li><p>如果 Webhook 接口返回 HTTP 4xx 错误（<code>main</code> 有未处理异常）的话，Telegram 会一直重试；而 Cloud Function 是按调用次数计费的...</p></li><li><p>发送时间超过 48h 的消息是没法撤回的，尝试撤回的话 <code>python-telegram-bot</code> 会丢出异常。</p></li><li><p>Telegram 的 Markdown/MarkdownV2 都不支持表格，HTML 标签也只支持给定的几个。 （可以试试<a href="https://gist.github.com/xiaopc/324acb627e6f1f019ab60b0ec0e355aa">只用 Pillow 把表格画成图片</a>，matplotlib 什么的就不要想了）</p></li></ol><script src="https://gist.github.com/xiaopc/324acb627e6f1f019ab60b0ec0e355aa.js"></script><h2 id="调用其他-function再嫖个-nosql">11. 调用其他 Function，再嫖个 NoSQL</h2><p>调用其他 Function 其实也是用 HTTP API，一个示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">APIHOST  = os.environ.get(<span class="string">&#x27;__OW_API_HOST&#x27;</span>)</span><br><span class="line">NAMESPACE = os.environ.get(<span class="string">&#x27;__OW_NAMESPACE&#x27;</span>)</span><br><span class="line">USER_PASS = os.environ.get(<span class="string">&#x27;__OW_API_KEY&#x27;</span>).split(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">call_action</span>(<span class="params">action, params = &#123;&#125;</span>):</span><br><span class="line">    url = APIHOST + <span class="string">&#x27;/api/v1/namespaces/&#x27;</span> + NAMESPACE + <span class="string">&#x27;/actions/&#x27;</span> + action</span><br><span class="line">    response = requests.post(url, json=params, params=&#123;<span class="string">&#x27;blocking&#x27;</span>: <span class="string">&#x27;true&#x27;</span>&#125;, auth=(USER_PASS[<span class="number">0</span>], USER_PASS[<span class="number">1</span>])).json()</span><br><span class="line">    <span class="keyword">if</span> response[<span class="string">&#x27;response&#x27;</span>][<span class="string">&#x27;success&#x27;</span>]:</span><br><span class="line">        <span class="keyword">return</span> response[<span class="string">&#x27;response&#x27;</span>][<span class="string">&#x27;result&#x27;</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="built_in">str</span>(response[<span class="string">&#x27;response&#x27;</span>][<span class="string">&#x27;result&#x27;</span>]))</span><br></pre></td></tr></table></figure><p>加上个 NoSQL，基本上已经可以解决大部分写 Bot 的需求了。</p><p>Cloudant 是基于 Apache CouchDB 的 NoSQL 数据库，用 RESTful API 访问，JSON 输出。免费层送 1GB 空间。</p><p><a href="https://docs.couchdb.org/en/stable/intro/api.html">这是 CouchDB 的 API</a>，Cloudant 因为要用 IBM Cloud 的认证，所以有所不同。</p><p><a href="https://python-cloudant.readthedocs.io/en/stable/cloudant.html">这是一个 Python 的 Client package</a>.</p><h2 id="尾声">12. 尾声</h2><p>IBM Cloud 用了很多 Apache 的东西，Cloud Function 用的也是 Apache Openwhisk。</p><p>如果基础云服务都有通用的协议的话，可能才会真的会有全部「上云」的那天吧。</p><hr /><p>本文参考了：</p><p>[1] https://stackoverflow.com/questions/58698406/aws-lambda-python-so-module-modulenotfounderror-no-module-named-regex-rege</p><p>[2] https://github.com/pyenv/pyenv/issues/240</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;2023-11-18 update: 三年后 IBM Cloud 砍了云函数业务，本文可以不用看了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最后来一些&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%86%B7%E7%9F%A5%E8%AD%98&quot;&gt;豆知识&lt;/a&gt;收尾。&lt;/p&gt;</summary>
    
    
    
    <category term="devops" scheme="https://xiaopc.org/categories/devops/"/>
    
    
  </entry>
  
  <entry>
    <title>Serverless 写 Telegram Bot? 白嫖 IBM Cloud (2)</title>
    <link href="https://xiaopc.org/2020/12/07/serverless-%E5%86%99-telegram-bot-%E7%99%BD%E5%AB%96-ibm-cloud-2/"/>
    <id>https://xiaopc.org/2020/12/07/serverless-%E5%86%99-telegram-bot-%E7%99%BD%E5%AB%96-ibm-cloud-2/</id>
    <published>2020-12-07T12:11:24.000Z</published>
    <updated>2023-11-18T03:59:46.209Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>2023-11-18 update: 三年后 IBM Cloud 砍了云函数业务，本文可以不用看了</p></blockquote><p>第二集，让它跑起来。</p><span id="more"></span><h2 id="打包及部署">4. 打包及部署</h2><p>此时目录结构应该是这样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">telegram</span><br><span class="line">- virtualenv</span><br><span class="line">  - ...</span><br><span class="line">+ __main__.py</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>接下来是打包成 zip：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ zip -r target.zip *.py virtualenv</span><br></pre></td></tr></table></figure><p>（就是全部打包成一个 zip）</p><p>接下来是部署：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ibmcloud fn action create telegram/repeat --kind python:3.7 target.zip --param BOT_API_KEY **********:****************************** --web <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>将上面的星号部分换成 Telegram 的 Bot key。</p><p>解释一下这条命令：</p><ol type="1"><li><p><code>fn</code> 是刚才安装的 Cloud Functions 插件， <code>action</code> 是「操作」</p></li><li><p><code>create</code> 是创建函数，<code>update</code> 是更新， etc...</p></li><li><p>接下来第一个参数是函数名，可以带一级目录</p></li><li><p><code>--param</code> 参数可以设置直接传入 <code>args</code> 的环境变量，在网页控制台的「参数」页面也可以设置</p></li><li><p><code>--web true</code> 会为这个函数提供不需要认证的 HTTP 接口，如果设置为 <code>raw</code> 的话，传入的请求不会被解析成对象（纯文本）；在网页控制台的「端点」页面也可以设置，接下来也要用</p></li></ol><p>其他的用法看帮助：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ibmcloud fn action create --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><p>上传过程可能比较慢，还有可能上传成功了却没响应...</p><h2 id="获取接口地址">5. 获取接口地址</h2><p>打开网页控制台，找到刚才创建的函数。在「端点」页面那里的 <code>HTTP 方法</code> 部分的 URL 应该类似这样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://us-south.functions.appdomain.cloud/api/v1/web/******%40*****.com_dev/*****/***** </span><br></pre></td></tr></table></figure><p>正如上面写的，后面加扩展名可以输出对应种类的 <code>Content-type</code>，这里 Telegram Bot 的请求头会处理的。</p><h2 id="设置-webhook">6. 设置 Webhook</h2><p>这里要用到 Telegram Bot 的原始接口了。放心，就用这一下。</p><p>设置 Webhook：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api.telegram.org/bot**********:******************************/setWebhook?url=</span><br></pre></td></tr></table></figure><p>星号换成 Key，后面接上接口地址，那么完整链接就是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api.telegram.org/bot**********:******************************/setWebhook?url=https://us-south.functions.appdomain.cloud/api/v1/web/******%40*****.com_dev/*****/*****</span><br></pre></td></tr></table></figure><p>随便找浏览器打开就行了。</p><p>然后查看一下状态：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api.telegram.org/bot**********:******************************/getWebhookInfo</span><br></pre></td></tr></table></figure><p>会以 JSON 形式返回状态：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;ok&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;result&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://us-south.functions.appdomain.cloud/api/v1/web/******%40*****.com_dev/*****/*****&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;has_custom_certificate&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pending_update_count&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;max_connections&quot;</span><span class="punctuation">:</span> <span class="number">40</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ip_address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;104.20.226.69&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>可以检查下是否设置成功，在出现调用失败的时候也能通过这个接口查看问题，以下为出现错误请求时的状态：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;ok&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;result&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://us-south.functions.appdomain.cloud/api/v1/web/******%40*****.com_dev/*****/*****&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;has_custom_certificate&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pending_update_count&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;last_error_date&quot;</span><span class="punctuation">:</span> **********<span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;last_error_message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Wrong response from the webhook: 400 Bad Request&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;max_connections&quot;</span><span class="punctuation">:</span> <span class="number">40</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ip_address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;104.20.226.69&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>这样一个 Bot 就做好了~</p><h2 id="调试及状态监控">7. 调试及状态监控</h2><p>如果刚才测试过接口的话，会发现每次响应都包含一个 <code>code</code>。Cloud Functions 为每次请求都生成了一个 「激活标志」 ID，可以通过这个 ID 来进行调试，查看请求、输出等等日志信息。</p><p>在网页控制台的「监视」页面可以查看统计信息，还可以点击请求的激活标志查看日志。</p><p>而在 CLI 中可以通过这个命令打开日志 poll 推送：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ibmcloud fn activation poll</span><br></pre></td></tr></table></figure><p>这里只显示基础日志（stdout、stderr 输出），查询详细日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ibmcloud fn activation get **********激活标志**********</span><br></pre></td></tr></table></figure><p>到此，只用一个 Cloud Functions 做一个简单的 Bot 就完成了。</p><p>下一集是如何调用其他 Function，以及如何加嫖 IBM Cloud 其他服务了。</p><hr /><p>本文参考了：</p><p>[1] https://useless-ideas.hashnode.dev/building-a-telegram-bot-with-ibm-cloud-functions-ck7dmyvi7000c8qs1tuklfuf6</p><p>[2] https://core.telegram.org/bots/api</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;2023-11-18 update: 三年后 IBM Cloud 砍了云函数业务，本文可以不用看了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第二集，让它跑起来。&lt;/p&gt;</summary>
    
    
    
    <category term="devops" scheme="https://xiaopc.org/categories/devops/"/>
    
    
  </entry>
  
  <entry>
    <title>Serverless 写 Telegram Bot? 白嫖 IBM Cloud (1)</title>
    <link href="https://xiaopc.org/2020/11/18/serverless-%E5%86%99-telegram-bot-%E7%99%BD%E5%AB%96-ibm-cloud-1/"/>
    <id>https://xiaopc.org/2020/11/18/serverless-%E5%86%99-telegram-bot-%E7%99%BD%E5%AB%96-ibm-cloud-1/</id>
    <published>2020-11-18T02:51:32.000Z</published>
    <updated>2023-11-18T03:59:46.209Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>2023-11-18 update: 三年后 IBM Cloud 砍了云函数业务，本文可以不用看了</p></blockquote><p>网上的教程都是教白嫖 Cloud Foundary 建站<del>开梯子</del>的，弄得 IBM 都开始封 IP 了，哼。 (* ￣︿￣)</p><p>来玩点正经的吧！今天用 Serverless 来做 Telegram Bot。</p><span id="more"></span><h2 id="注册">0. 注册</h2><p>IBM Cloud 的免费 tier 有一个好，不用绑信用卡（这也是被薅太多的原因之一）。</p><p>在 <a href="https://www.ibm.com/cloud/free">https://www.ibm.com/cloud/free</a> 能看到免费项目，这里首先要用 IBM Cloud Functions。</p><p>Cloud Functions 是 IBM 提供的 Serverless 服务，类似<a href="https://www.aliyun.com/product/fc?source=5176.11533457&amp;userCode=hl1uilbl">阿里云的函数计算</a>、<a href="https://cloud.tencent.com/act/cps/redirect?redirect=10232&amp;cps_key=da2e67a4ea07864f3ac54599a94cd8c7">腾讯云的云函数</a>。与 App Engine 服务不同的是，函数计算只在被触发时才会运行，在限定执行时间返回结果，不能持久运行。</p><p>IBM Cloud 给了 500 万次/月的免费额度，阿里云和腾讯云也有一定的免费额度。不过这次是来做 Telegram Bot，这里就来嫖 IBM 的。</p><p>注册的时候，如果在最后一步遇到错误，那么可能是被 ban IP 了，可以试试挂梯子注册...</p><h2 id="安装-cli-及配置">1. 安装 CLI 及配置</h2><p>注册以后来到网页控制台里的 <a href="https://cloud.ibm.com/functions">Cloud Functions</a>。控制台里有这些选项卡：</p><ul><li><p>操作：这里是函数列表。</p></li><li><p>触发器：这里可以添加从 IBM Cloud 其他服务或第三方消息源收到信息后触发某个函数，这里还用不到。</p></li><li><p>API：把函数整理成 API，目前还用不到。</p></li><li><p>监视：能看到最近请求的日志</p></li><li><p>名称空间设置：namespace，顾名思义。默认分配的位于达拉斯，名称是邮箱。也可以添加其他地方，但这里有坑，后面再说。</p></li></ul><p>如果在网页控制台里新建操作，会发现它只给了个单文件代码输入，而且还没办法添加 packages，这就很鸡肋了。</p><p>所以要安装 CLI 来在本地写代码：（下面是 Linux 安装，其他安装方法<a href="https://cloud.ibm.com/docs/openwhisk?topic=cloud-functions-cli_install">见这</a>）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -fsSL https://clis.cloud.ibm.com/install/linux | sh</span><br></pre></td></tr></table></figure><p>登录，注意这时要选区域，如果是达拉斯那就是 <code>us-south</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ibmcloud login</span><br></pre></td></tr></table></figure><p>需要额外设置「组织」和「空间名」两个设置，在网页版右上角「管理-账户-Cloud Foundry 组织」可以找到组织名（一般是账号邮件地址），点进去有空间名（一般是 <code>dev</code>）。</p><p><del>前面提到的坑在于，在 Cloud Functions 里建立的命名空间不是基于 Cloud Foundary 的，无法用 CLI 来进行操作（aka 只能用网页操作）。而 Cloud Foundary 在免费 tier 只提供了 <code>us-south</code>，所以东京等等节点基本上没法用...</del></p><blockquote><p>2021.1.25 update <br> (基于 IAM 而不是 Cloud Foundary 的命名空间) 其实可以用 CLI，区域选新命名空间所在的区域，然后用 <code>ibmcloud fn property set --namespace '命名空间'</code> 为 Function 单独指定即可，不需要设置 Cloud Foundary 相关参数.</p></blockquote><blockquote><p>2021.9.14 update <br> 如果需要设置上述命名空间，现在需要先设置资源组。在「管理-账户-资源组」找到标识（一串十六进制），用 <code>ibmcloud target -g 标识</code> 命令设置.</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ibmcloud target -o 组织名 -s 空间名</span><br></pre></td></tr></table></figure><p>设置好以后查看下账号信息，应该是这样的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ ibmcloud target</span><br><span class="line"></span><br><span class="line">API endpoint:      https://cloud.ibm.com</span><br><span class="line">Region:            us-south</span><br><span class="line">User:              ******@****.com</span><br><span class="line">Account:           ***** <span class="string">&#x27;s Account (****************)</span></span><br><span class="line"><span class="string">Resource group:    No resource group targeted, use &#x27;</span>ibmcloud target -g RESOURCE_GROUP<span class="string">&#x27;</span></span><br><span class="line"><span class="string">CF API endpoint:   https://api.us-south.cf.cloud.ibm.com (API version: 2.153.0)</span></span><br><span class="line"><span class="string">Org:               ******@****.com</span></span><br><span class="line"><span class="string">Space:             dev</span></span><br></pre></td></tr></table></figure><p>(资源组可以不设置)</p><p>然后安装 Functions 插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ibmcloud plugin install cloud-functions</span><br></pre></td></tr></table></figure><p>这样 CLI 就配置好了。</p><h2 id="注册-telegram-bot">2. 注册 Telegram Bot</h2><p><del>首先要有 Telegram 账号</del></p><p>搜索 <span class="citation" data-cites="BotFather">@BotFather</span> 按照提示建立就好。</p><p>记录一下 HTTP API 的 token <code>**********:******************************</code>。</p><h2 id="开始写">3. 开始写</h2><p>这里选择是用 Python 3.7 的环境，使用 <a href="https://python-telegram-bot.readthedocs.io/en/stable/index.html">python-telegram-bot</a> 这个库。</p><p>首先建立一个名叫 <code>virtualenv</code> 的 virtualenv...(好像其他名字不认)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ virtualenv virtualenv</span><br><span class="line">$ <span class="built_in">source</span> virtualenv/bin/activate</span><br></pre></td></tr></table></figure><p>安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install python-telegram-bot</span><br></pre></td></tr></table></figure><p>主入口是 <code>__main__.py</code>，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> telegram <span class="keyword">import</span> Bot, Update</span><br><span class="line"><span class="keyword">from</span> telegram.ext <span class="keyword">import</span> Dispatcher, CommandHandler, MessageHandler, CallbackQueryHandler, Filters, CallbackContext</span><br><span class="line"></span><br><span class="line"><span class="keyword">global</span> TOKEN</span><br><span class="line"><span class="keyword">global</span> bot</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fn_hi</span>(<span class="params">update: Update, context: CallbackContext</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    update.message.reply_text(<span class="string">&#x27;ヾ(•ω•`)o&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">response</span>(<span class="params">update: Update, context: CallbackContext</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    update.message.reply_text(update.message.text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">args</span>):</span><br><span class="line">    <span class="comment"># initialize bot object</span></span><br><span class="line">    TOKEN = args[<span class="string">&#x27;BOT_API_KEY&#x27;</span>]</span><br><span class="line">    bot = Bot(token=TOKEN)</span><br><span class="line">    <span class="comment"># set dispatcher</span></span><br><span class="line">    dispatcher = Dispatcher(bot=bot, update_queue=Queue(), use_context=<span class="literal">True</span>)</span><br><span class="line">    dispatcher.add_handler(CommandHandler(<span class="string">&#x27;hi&#x27;</span>, fn_hi))</span><br><span class="line">    dispatcher.add_handler(MessageHandler(Filters.text &amp; ~Filters.command, response))</span><br><span class="line">    dispatcher.add_handler(CallbackQueryHandler(handle_callback))</span><br><span class="line">    <span class="comment"># get webhook callback</span></span><br><span class="line">    update = Update.de_json(args, bot)</span><br><span class="line">    <span class="comment"># push to dispatcher</span></span><br><span class="line">    dispatcher.process_update(update)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="string">&#x27;code&#x27;</span>: <span class="string">&#x27;200&#x27;</span> &#125;</span><br></pre></td></tr></table></figure><p>代码里不设置 token，在部署的时候会作为参数传入。</p><p>这就完成了一个无情的复读机 (o=^•ェ•)o　┏━┓</p><p>如何部署，见下回分晓...</p><hr /><p>本文参考了：</p><p>[1] https://medium.com/<span class="citation" data-cites="aliabdelaal/telegram-bot-tutorial-using-python-and-flask-1fc634da9522">@aliabdelaal/telegram-bot-tutorial-using-python-and-flask-1fc634da9522</span></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;2023-11-18 update: 三年后 IBM Cloud 砍了云函数业务，本文可以不用看了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;网上的教程都是教白嫖 Cloud Foundary 建站&lt;del&gt;开梯子&lt;/del&gt;的，弄得 IBM 都开始封 IP 了，哼。 (* ￣︿￣)&lt;/p&gt;
&lt;p&gt;来玩点正经的吧！今天用 Serverless 来做 Telegram Bot。&lt;/p&gt;</summary>
    
    
    
    <category term="devops" scheme="https://xiaopc.org/categories/devops/"/>
    
    
  </entry>
  
  <entry>
    <title>从零开始的前端 i18n</title>
    <link href="https://xiaopc.org/2020/06/22/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84%E5%89%8D%E7%AB%AF-i18n/"/>
    <id>https://xiaopc.org/2020/06/22/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84%E5%89%8D%E7%AB%AF-i18n/</id>
    <published>2020-06-22T03:57:36.000Z</published>
    <updated>2023-11-18T03:59:46.209Z</updated>
    
    <content type="html"><![CDATA[<h2 id="零">0. 零</h2><p>internationalization, 抛去首尾是 18 个字母。</p><span id="more"></span><h2 id="实现的基础">1. 实现的基础</h2><p>在后端做 i18n 时一般是通过检查 HTTP 头 <code>Accept-Language</code> 来判断语言的。（也有加 IP 判断什么的那种）</p><p>前端没法读到这个请求头，而是通过 <code>navigator.language</code> 返回一个首选语言，此外还有 <code>navigator.languages</code>（实验性）提供如 <code>Accept-Language</code> 那样的语言优先顺序列表。</p><p>当然，如果已经习惯了各家浏览器对 W3C 标准的差异实现的话，对下面的内容应该不奇怪：</p><ol type="1"><li><p>IE&lt;=10 是 <code>navigator.browserLanguage</code> 和 <code>navigator.userLanguage</code>。<code>userLanguage</code> 是系统语言，<code>Internet 选项</code> 仅对 <code>Accept-Language</code> 有效。</p></li><li><p>IE&lt;10 和 Safari&lt;10.2 的语言代码没有按 IETF 语言标签规范，是全小写的。</p></li></ol><h2 id="打包工具-前端框架可以做哪些事">2. 打包工具 / 前端框架可以做哪些事</h2><p>已经有一份比较详细的说明了，直接甩链接：</p><p><a href="https://github.com/CommanderXL/D-i18n">https://github.com/CommanderXL/D-i18n</a></p><h2 id="前端-i18n-与-seo">3. 前端 i18n 与 SEO</h2><p>目前搜索引擎对 JS 动态生成的内容基本不怎么支持（Google 说它们的 bot 支持一部分 JS 也只是处理跳转）。</p><p>要是真看重这些的话，还是分站的比较好（在 url param 里放语言标识符效果也不好）。</p><h2 id="还有很多要做比如-l10n">4. 还有很多要做，比如 l10n</h2><p>文本替换只是第一步，能正确显示出来是第二步。CJK 文本和拉丁文本在显示位置、字体 hinting 等等都还要处理。</p><p>这还没提到 RTL(right-to-left) 的阿拉伯语、希伯来语等，这种即使文字能正确从右至左显示，在展现方式等方面调整几乎无异于重新设计了。</p><p>internationalization 离 localization 还是有点距离的啊。</p><hr /><p>本文参考了：</p><p>[1] https://developer.mozilla.org/zh-CN/docs/Web/API/NavigatorLanguage/language</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;零&quot;&gt;0. 零&lt;/h2&gt;
&lt;p&gt;internationalization, 抛去首尾是 18 个字母。&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://xiaopc.org/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>来上 Mesh - WDR7650 易展测评</title>
    <link href="https://xiaopc.org/2020/03/12/%E6%9D%A5%E4%B8%8A-mesh-wdr7650-%E6%98%93%E5%B1%95%E6%B5%8B%E8%AF%84/"/>
    <id>https://xiaopc.org/2020/03/12/%E6%9D%A5%E4%B8%8A-mesh-wdr7650-%E6%98%93%E5%B1%95%E6%B5%8B%E8%AF%84/</id>
    <published>2020-03-12T06:16:01.000Z</published>
    <updated>2023-11-18T03:59:46.213Z</updated>
    
    <content type="html"><![CDATA[<p>怎样才能让家里的 WiFi 跑满百兆+的网速？</p><span id="more"></span><p>首先，有线链路必须满千兆（从光猫口出发都是千兆口，网线在超五类及以上）；</p><p>其次，至少 WiFi 5（802.11ac），而 WiFi 4（802.11n）也只有在理论速度上能用了...</p><p>再次，信号强度要够强，信号弱的情况下协商出来的速率有可能还不如用 2.4G 来的高。</p><h2 id="解决方案的比较">0. 解决方案的比较</h2><p>AC+AP （无线控制器+接入点）当然是很成熟的技术了，大型场所的无线网络配置就选它。</p><p>但是在上面列的条件下，它也许并不合适。</p><p>狗东上最便宜的四口千兆 AC 都在 450+（当然了，搞软路由也是可以，但是<em>一般</em>家庭网络应该不会搞个这个玩意吧）。</p><p>还需要那么二三四个千兆 AP，总共加起来八九百的样子。</p><p>接下来就是 Mesh 了。</p><blockquote><p>无线 Mesh 技术是一种与传统无线网络完全不同的新型无线网络技术。在传统的 WLAN 中，每个客户端均通过一条与接入点（AP）相连的无线链路访问网络，用户若要进行相互通信，必须首先访问一个固定的AP，这种网络结构称为单跳网络。而在无线 Mesh 网络中，任何无线设备节点都可同时作为路由器，网络中的每个节点都能发送和接收信号，每个节点都能与一个或多个对等节点进行直接通信。</p><footer><strong>guiqiang107</strong><cite><a href="https://www.jianshu.com/p/ce56f75284b8">www.jianshu.com/p/ce56f75284b8</a></cite></footer></blockquote><p>简而言之，网络内的无线路由器互相连接，设备连接到一个无线路由器后，如果因为信号不好等原因，可以无缝切换到另外一个路由器。</p><p>那这技术这么好，是不是随便整两台路由器连起来就能用？</p><p>Mesh 是一个组网方案，并没有一套标准。比如华硕叫 AiMesh，TP-LINK 叫易展，等等。目前（貌似）只有同一生产商之内才能互认。</p><h2 id="选这套的理由">1. 选这套的理由</h2><p>因为便宜。(　o=^•ェ•)o　┏━┓</p><p>比 TP-LINK WDR7650 这款便宜的只有一款 H3C B5mini，后者看评测信号功率稍小一点，就选了前者。</p><p>（以后有机会的话也可以测测 B5mini，当然要是有钱的话也是可以测测华硕的 (●ˇ∀ˇ●)</p><p>如果超过了 5 台的话，还是 AC+AP 更好，带机量更高些。（这是给住大平层/别ye朋友的建议）</p><p>还是贴两张开箱图：</p><p><img src="/images/mesh-1.jpg" /></p><p><img src="/images/mesh-2.jpg" /></p><p>两台路由器，两个电源适配器，一根（不到一米？）超五类线，一本不用看系列，右上角那张用来记密码的纸。</p><p>（那张纸感觉没什么用，要记的人自然有纸本，不记的人也不会用...）</p><h2 id="环境介绍">2. 环境介绍</h2><p>疫情期间，奠信搞了个活动，用「小翼管家」App 可以领三个月 200M 提速包。（就不放链接了）</p><p>昨天学校又发了个通知，「停课不停学」可以直接升 300M 三个月，所以目前网络环境是 300Mbps 下行，50Mbps 上行。</p><p>（但是在写这篇 blog 的时候又跑不满了，黑人问号）</p><p>网络拓扑和平面图如下：</p><p><img src="/images/mesh-3.png" /></p><p>青色的 ABC 三点是有线网络连接的地方，红色的 a-h 是房间。</p><p>（后文的漫游测试均为从 a 到 h 的顺序）</p><p>有线网络的布线在装修的时候就没考虑过，直接就是开发商预埋的样子，导致网络布局不合理。</p><p>然后这个光猫还只有一个千兆口（刚开始配置的时候速度一直跑不上去，还找了半天问题 ￣へ￣），所以只能用菊花链的方式连接两台路由器了。</p><p>（只要两台路由器在同一个网络下就可以）</p><p>有懂的朋友可能要问了，Mesh 可以无线连接两台路由器，不用有线啊？别急，后面会解释。</p><h2 id="说说体验">3. 说说体验</h2><p>测试了笔记本，iPad 和手机，下文中的测试设备均为某厂 Mate 20 Pro with Android 10，2*2 MIMO。</p><p>总体上体验还好，各屋都能收到 5GHz 信号，协商速度都在 100Mbps 以上，大部分能达到 400Mbps，一半能达到 600Mbps 以上。</p><p>还是有两个小问题：</p><p>一是切换的阈值不好把握，测试设备要等信号强度到 -65dBm （左右）以下才会切换到另一个路由器，然而此时的协商速度已经比较低了。这对于要达到全屋都高速的目标来讲是个问题，有时候只能断开重连才能连接到最优的节点。</p><p><img src="/images/mesh-4.jpg" /></p><p>（App：Cellurar-Z）</p><p>二是漫游的过程中速度不是太稳定，信号好的时候也不一定协商到高的速度。</p><p><img src="/images/mesh-5.jpg" /></p><p>（App：WiFi 魔盒）</p><h2 id="关于无线回程和-mu-mimo">4. 关于无线回程和 MU-MIMO</h2><p>在没有 Mesh 的时候，无线回程就相当于一个无线中继，就是增加了一个单独的接入点，只是 SSID 和主热点相同而已。</p><p>效果嘛，只是信号格子看起来更满了而已，速度谁用谁知道。</p><p>那 Mesh 无线回程会好一些嘛，下面是测速结果：</p><p><img src="/images/mesh-6.png" /></p><p>有线回程是 B 点的路由器，无线回程把它放到了 f 点（阳台），因为在之前的漫游测试中都是在这个点位出现了漫游切换。</p><p>可以看到，无线回程的性能嘛，还行，但不是最好的状态。（无线回程在漫游测试的时候竟然没有发生切换，这就很奇怪）</p><p>再说说 MU-MIMO，简单来讲，所有连接的设备要都支持 MIMO 才能用上 MU-MIMO。</p><p>家里但凡有个老点的设备都会影响到，所以...就看自己需求了。<a href="http://b23.tv/av90865222">一条解释视频</a></p><p>WiFi 6 （802.11ax）引入了 OFDMA，能让 MU-MIMO 真正好用。</p><p>那么，WiFi 6 再见！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;怎样才能让家里的 WiFi 跑满百兆+的网速？&lt;/p&gt;</summary>
    
    
    
    <category term="其他" scheme="https://xiaopc.org/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>给 Github 加 GPG 签名认证</title>
    <link href="https://xiaopc.org/2020/02/20/%E7%BB%99-github-%E5%8A%A0-gpg-%E7%AD%BE%E5%90%8D%E8%AE%A4%E8%AF%81/"/>
    <id>https://xiaopc.org/2020/02/20/%E7%BB%99-github-%E5%8A%A0-gpg-%E7%AD%BE%E5%90%8D%E8%AE%A4%E8%AF%81/</id>
    <published>2020-02-20T01:42:30.000Z</published>
    <updated>2023-11-18T03:59:46.213Z</updated>
    
    <content type="html"><![CDATA[<p>先来最终效果：</p><p><img src="/images/github-gpg.svg" /></p><span id="more"></span><h2 id="intro">0. Intro</h2><p>昨天大家都在看自己能不能领到那笔钱 ╮(╯▽╰)╭</p><p>（不知道怎么回事的<a href="https://www.namebase.io/airdrop">点这</a>）</p><p>在添加 SSH key 那里还可以添加 GPG key。那么什么是 GPG，GPG 有什么好处，怎样用 GPG 呢，<del>接下来小编...</del></p><blockquote><p>PGP（英语：Pretty Good Privacy，中文翻译“优良保密协议”）是一套用于讯息加密、验证的应用程序，采用 IDEA 的散列算法作为加密和验证之用。</p><p>PGP 本身是商业应用程序；开源并具有同类功能的工具名为 GnuPG（GPG）。PGP及其同类产品均遵守 OpenPGP 数据加解密标准（RFC 4880）。</p><footer><strong>Wikipedia</strong><cite><a href="https://zh.wikipedia.org/wiki/PGP">zh.wikipedia.org/wiki/PGP</a></cite></footer></blockquote><p>（看到这一段就想到上信息系统安全那个课的时候 →_→）</p><p>使用过 Github 的网页 Git 编辑器或是在网页 merge，可能会注意到 commit 就有 Verified 标志，提示 <em>This commit was created on GitHub.com and signed with a verified signature using GitHub’s key.</em> 它的公钥是 <a href="https://github.com/web-flow.gpg">https://github.com/web-flow.gpg</a>.</p><p>（<code>username.gpg</code> 可以看任意用户的 GPG 公钥，<code>username.keys</code> 可以看任意用户的 SSH 公钥）</p><p>签名的目的是确认「这是你发的内容」，你使用私钥加密消息的 hash，任何有你的公钥的人可以用公钥解密得到这段 hash，从而可以确认内容就是你发的，并且没有被篡改。</p><p>它可以用来签名邮件、消息等等，Git 也支持用 GPG 签名 commit。</p><h2 id="安装">1. 安装？</h2><p>如果你用的 Windows，安装的是 Git on Windows，那么你很可能已经安装有 GPG 了。</p><p>检查一下 <code>C:\Program Files\Git\usr\bin</code>（根据 Git 的安装目录调整），里面如果有 <code>gpg.exe</code> 那就是已经有了。</p><p>如果你用的是 GNU/Linux（→_→），那么很可能也有了。</p><p>如果用的是 macOS 得安装一下，<a href="https://gpgtools.org/">link</a>.</p><p>在终端输入 <code>gpg</code> 如果能找到的话就没问题。（不过可能要注意一下 GPG 版本最好大于 <code>2</code>）</p><h2 id="创建-key-pair">2. 创建 key pair</h2><p>对 Windows 用户，最好用 Git Bash（<code>C:\Program Files\Git\git-bash.exe</code>）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">xiaopc@desktop MINGW64 /</span><br><span class="line">$ gpg --gen-key                                <span class="comment"># 生成 key</span></span><br><span class="line">gpg (GnuPG) 2.2.9-unknown; Copyright (C) 2018 Free Software Foundation, Inc.</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line"></span><br><span class="line">Note: Use <span class="string">&quot;gpg --full-generate-key&quot;</span> <span class="keyword">for</span> a full featured key generation dialog.</span><br><span class="line"></span><br><span class="line">GnuPG needs to construct a user ID to identify your key.</span><br><span class="line"></span><br><span class="line">Real name: xiaopc                              <span class="comment"># 和你的 Git 设置里的名字一样</span></span><br><span class="line">Email address: xiaopc@users.noreply.github.com <span class="comment"># 见后文</span></span><br><span class="line">You selected this USER-ID:</span><br><span class="line">    <span class="string">&quot;xiaopc &lt;xiaopc@users.noreply.github.com&gt;&quot;</span></span><br><span class="line"></span><br><span class="line">Change (N)ame, (E)mail, or (O)kay/(Q)uit? o    <span class="comment"># 确认，然后会提示设置 key 的密码</span></span><br><span class="line">We need to generate a lot of random bytes. It is a good idea to perform</span><br><span class="line">some other action (<span class="built_in">type</span> on the keyboard, move the mouse, utilize the</span><br><span class="line">disks) during the prime generation; this gives the random number</span><br><span class="line">generator a better chance to gain enough entropy.</span><br><span class="line">gpg: key 0E745983E6FDC614 marked as ultimately trusted</span><br><span class="line">gpg: revocation certificate stored as ******   <span class="comment"># 如果把公钥公告到 WoT 后 key 丢失</span></span><br><span class="line">public and secret key created and signed.      <span class="comment"># 可以用 rev 证书吊销</span></span><br><span class="line"></span><br><span class="line">pub   rsa2048 2020-02-19 [SC] [expires: 2022-02-18]</span><br><span class="line">      **************************************   <span class="comment"># 记住这一段 ID</span></span><br><span class="line">uid                      xiaopc &lt;xiaopc@users.noreply.github.com&gt;</span><br><span class="line">sub   rsa2048 2020-02-19 [E] [expires: 2022-02-18]</span><br></pre></td></tr></table></figure><p>需要注意，邮件地址必须是绑定 Github 的地址，或是 <code>username@users.noreply.github.com</code> 这个 Github 提供的转发地址（隐藏邮件地址），并且邮件地址必须和 Git 设置的地址相同。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">xiaopc@desktop MINGW64 /</span><br><span class="line">$ gpg --list-secret-keys --keyid-format LONG   <span class="comment"># 查看本地 key 列表</span></span><br><span class="line">gpg: checking the trustdb</span><br><span class="line">gpg: marginals needed: 3  completes needed: 1  trust model: pgp</span><br><span class="line">gpg: depth: 0  valid:   2  signed:   0  trust: 0-, 0q, 0n, 0m, 0f, 2u</span><br><span class="line">gpg: next trustdb check due at 2022-02-18</span><br><span class="line">/c/Users/xiaopc/.gnupg/pubring.kbx             <span class="comment">#  ~/.gnupg 是存储 keys 的目录</span></span><br><span class="line">----------------------------------</span><br><span class="line">sec   rsa2048/0E745983E6FDC614 2020-02-19 [SC] [expires: 2022-02-18]</span><br><span class="line">      **************************************   <span class="comment"># 和上面的 ID 一样</span></span><br><span class="line">uid                 [ultimate] xiaopc &lt;xiaopc@users.noreply.github.com&gt;</span><br><span class="line">ssb   rsa2048/**************** 2020-02-19 [E] [expires: 2022-02-18]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>GPG 的 keys 都是二进制存储的，要把公钥转换成编码的文本文件才能上传：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">xiaopc@desktop MINGW64 /   <span class="comment"># 下面 *** 就是上面的 ID</span></span><br><span class="line">$ gpg --armor --<span class="built_in">export</span> pub **************************************</span><br><span class="line">-----BEGIN PGP PUBLIC KEY BLOCK-----</span><br><span class="line"></span><br><span class="line"><span class="comment"># 公钥...</span></span><br><span class="line">-----END PGP PUBLIC KEY BLOCK-----</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="添加公钥到-github">3. 添加公钥到 Github</h2><p>Settings -&gt; SSH and GPG keys -&gt; New GPG key，将上面命令输出的内容复制过来，确定。</p><p>（就不放图了）</p><h2 id="设置本地-git">4. 设置本地 Git</h2><p>Git 的设置是有层级的。</p><p>系统级设置在 <code>C:\Program Files\Git\mingw64\etc\gitconfig</code>.（GNU/Linux <code>/etc/gitconfig</code>）</p><p>本地用户全局设置在 <code>C:\Users\&lt;用户名&gt;\.gitconfig</code>.（GNU/Linux <code>~/.gitconfig</code>）</p><p>单个仓库的设置在仓库目录的 <code>.git\config</code>.</p><p>在哪级设置都可以，方法是一样的。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[user]</span></span><br><span class="line">  <span class="attr">name</span> = xiaopc</span><br><span class="line">  <span class="attr">email</span> = xiaopc@users.noreply.github.com               <span class="comment">; 必须是 key 对应的地址</span></span><br><span class="line">  <span class="attr">signingkey</span> = **************************************   <span class="comment">; 就是刚才那个 ID</span></span><br><span class="line"><span class="section">[commit]</span></span><br><span class="line">  <span class="attr">gpgsign</span> = <span class="literal">true</span></span><br><span class="line"><span class="section">[gpg]</span></span><br><span class="line">  <span class="attr">program</span> = <span class="string">&quot;C:\\Program Files\\Git\\usr\\bin\\gpg.exe&quot;</span> <span class="comment">; 如果提示找不到 gpg 位置就添加这个</span></span><br></pre></td></tr></table></figure><h2 id="commit">5. commit</h2><p>就是正常的 commit 过程，只是会提示输入 key 的密码。</p><p>更多的操作可以看参考链接 1。</p><hr /><p>本文参考了：</p><p>[1] 用 PGP 保护代码完整性（六）：在 Git 上使用 PGP <a href="https://linux.cn/article-10421-1.html">https://linux.cn/article-10421-1.html</a></p><p>[2] Sign your git commits with tortoise git on windows <a href="https://dev.to/c33s/sign-your-git-commits-with-tortoise-git-on-windows-3mlf">https://dev.to/c33s/sign-your-git-commits-with-tortoise-git-on-windows-3mlf</a></p><p>[3] 在 TortoiseGit 中使用 GPG 签名 <a href="https://blog.rathena.cn/post/use-gpg-in-tortoisegit/">https://blog.rathena.cn/post/use-gpg-in-tortoisegit/</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;先来最终效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/github-gpg.svg&quot; /&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="devops" scheme="https://xiaopc.org/categories/devops/"/>
    
    
  </entry>
  
  <entry>
    <title>Home Assistant 连接米家设备</title>
    <link href="https://xiaopc.org/2020/02/02/home-assistant-%E8%BF%9E%E6%8E%A5%E7%B1%B3%E5%AE%B6%E8%AE%BE%E5%A4%87/"/>
    <id>https://xiaopc.org/2020/02/02/home-assistant-%E8%BF%9E%E6%8E%A5%E7%B1%B3%E5%AE%B6%E8%AE%BE%E5%A4%87/</id>
    <published>2020-02-02T07:42:30.000Z</published>
    <updated>2023-11-18T03:59:46.209Z</updated>
    
    <content type="html"><![CDATA[<p>谁说米家的设备不能接入天猫精灵呢？</p><span id="more"></span><h2 id="intro">0. Intro</h2><p>（在讨论 nodemcu 中）</p><p>冰神：「天猫精灵没得靠谱的温度传感器，决定自己做一个」</p><p>窝：「米家空气监测仪啊」</p><p>冰神：「可是我不用小爱同学」</p><h2 id="先批判一番">1. 先批判一番</h2><p>智能家居品牌都喜欢搞独占这一套（指国内）。</p><p>比如，只能接入米家的「米家智能插座 WiFi 版」只要 39 RMB，而 ZigBee 版要 69 RMB（还得再买个网关）才能接入 Homekit。</p><p>（虽然 ZigBee 版功能多一点）</p><p>用米家 WiFi 芯片的 IoT 设备只能接入米家的云服务，再加上现在国内貌似只有米家的生态链最齐全，感觉已经有米家垄断的影子了。</p><h2 id="介绍-home-assistant-hass">2. 介绍 Home Assistant (hass)</h2><p>引述文档的一个中文版翻译 [1]：</p><blockquote><p>Home Assistant 是一款基于 Python 的智能家居开源系统，支持众多品牌的智能家居设备，可以轻松实现设备的语音控制、自动化等。</p></blockquote><p>简单讲，hass 就是一套统一的网关系统，与所有的硬件进行通讯，然后对外提供 Web GUI 和接口。</p><p>然后有人在天猫精灵的平台做了 hass 的适配，由于窝没有天猫精灵就不尝试了，<a href="https://card.weibo.com/article/m/show/id/2309404214308207761132">链接在这</a>。</p><p><a href="https://www.home-assistant.io/integrations/">目前官方适配的硬件列表在这</a>，当然也可以自己写适配器，就参考官方文档啦。</p><h2 id="安装-hass">3. 安装 hass</h2><p>推荐配置是树莓派 4B，树莓派可以直接用基于 Raspbian 的 <a href="https://www.home-assistant.io/hassio/">Hass.io</a> 镜像。（当然也有一些国情优化版，自行选择 ;D</p><p>也有 <a href="https://hub.docker.com/r/homeassistant/home-assistant">Docker 版</a>，能装到群晖或者软路由什么的上面。</p><p>当然，如果是在本地测试的话，要求 Python 3.5.3+。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip3 install homeassistant</span><br><span class="line">hass --open-ui</span><br></pre></td></tr></table></figure><p>默认端口号是 <code>8123</code> ，第一次启动是一大堆配置，用户名密码什么的。</p><p>（当然，推荐是用 venv）</p><h2 id="米家相关">4. 米家相关</h2><p>连接 ZigBee 设备是比较简单的（<a href="https://home-assistant.cc/component/xiaomi/zigbee/">见这</a>），而直接连接云服务的 WiFi 设备就比较头疼了。</p><p>这类设备的接口被叫做 <code>miIO</code>，走这个接口的设备<a href="https://github.com/rytilahti/python-miio">见此</a>。（想研究协议本身可以看<a href="https://github.com/OpenMiHome/mihome-binary-protocol/blob/master/doc/PROTOCOL.md">这个</a>）</p><p>与每个使用 <code>miIO</code> 的设备通信都需要一个 token，目前只能通过提取 Android 米家 5.0 至 <a href="https://mi-home.en.uptodown.com/android/download/1690042">5.0.19</a> 版本的数据库文件 <code>miio2.db</code> 才能获取到。（4.x 实测已经不能显示此类设备）</p><p>（注意，这个 token 在重置网络后会失效）</p><p>有 root 就很简单，直接打开 <code>/data/data/com.xiaomi.smarthome/databases/miio2.db</code>，里面 <code>devicereord</code> 表就有设备对应的 token。</p><p>没有 root 的话就只能用应用备份把数据库备份出来，再解包备份文件。</p><p>通过 adb 备份（不是所有的 ROM 都可以，窝用 Smartisan M1 就没法备份，当然用模拟器可能更简单）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb backup -noapk com.xiaomi.smarthome -f backup.ab</span><br></pre></td></tr></table></figure><p>然后用 <code>adbextractor</code>（<a href="https://sourceforge.net/projects/adbextractor/">sourceforge</a>） 提取： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar ../android-backup-extractor/abe.jar unpack backup.ab backup.tar <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure></p><p>SQLite 数据库有很多在线查看的工具，比如 <a href="https://inloop.github.io/sqlite-viewer/">https://inloop.github.io/sqlite-viewer/</a>。</p><p>此外，配置还需要设备的 IP，看下路由表就有，刚才那张表的 <code>localIP</code> 列也有。要确认 hass 运行的设备能连接上这个 IP。</p><h2 id="配置">5. 配置</h2><p>hass 所有的配置都在配置目录的 <code>configuration.yaml</code> 里，在支持的设备列表里有配置说明，在参考链接 [2] 也有（这个翻译版有的地方有点旧了，有官方适配的还是以官方文档为准）。</p><p>这里以米家空气检测仪为例，文档页面<a href="https://www.home-assistant.io/integrations/air_quality.xiaomi_miio/">在此</a>。</p><p>直接在 <code>configuration.yaml</code> 里添加：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">air_quality:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">platform:</span> <span class="string">xiaomi_miio</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">IP_ADDRESS</span></span><br><span class="line">    <span class="attr">token:</span> <span class="string">YOUR_TOKEN</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Mijia</span> <span class="string">Air</span> <span class="string">Quality</span> <span class="string">Monitor</span></span><br></pre></td></tr></table></figure><p>注意 <a href="https://learnxinyminutes.com/docs/zh-cn/yaml-cn/">yaml 的语法</a>（缩进），以及根节点（比如上面就是 <code>air_quality</code>）不能有重复的，要写成一个列表。</p><p>在第一次运行的时候，可能会注意到在 Web 界面上就能添加一些设备，但是不知道为什么那个入口没有米家（？？？）；然后 yaml 也有 <code>import</code>，可以自己去拆分成几个文件；再然后 Web 界面等等的配置也是在 <code>configuration.yaml</code> 里面改，具体见文档。</p><h2 id="尾声">6. 尾声</h2><p>先放个图吧。</p><p><img src="/images/home-assistant.jpg" /></p><p>如果仔细看图可以发现，虽然能获取到数据，但是显示还是有点小问题（<span class="math inline">\(\mathrm{CO_{2}e}\)</span> 这个值是因为窝关了这项检测）。此外，米家空气检测仪还有温湿度检测，但是官方的适配就强行把它归类到空气质量类 sensor，不显示温湿度...（<code>python-miio</code> 库<a href="https://github.com/rytilahti/python-miio/blob/master/miio/airqualitymonitor.py">明明就有输出</a>，当然咯也可以自己写适配器）</p><p>窝觉得，这个项目迟早要重构（</p><hr /><p>本文参考了：</p><p>[1] Home Assistant 中文文档 <a href="https://home-assistant.cc/">https://home-assistant.cc/</a></p><p>[2] WiFi - Home Assistant 中文文档 <a href="https://home-assistant.cc/component/xiaomi/wifi/">https://home-assistant.cc/component/xiaomi/wifi/</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;谁说米家的设备不能接入天猫精灵呢？&lt;/p&gt;</summary>
    
    
    
    <category term="其他" scheme="https://xiaopc.org/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>Github Actions 测试 - 自动部署 Hexo</title>
    <link href="https://xiaopc.org/2019/08/29/github-actions-%E6%B5%8B%E8%AF%95-%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2-hexo/"/>
    <id>https://xiaopc.org/2019/08/29/github-actions-%E6%B5%8B%E8%AF%95-%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2-hexo/</id>
    <published>2019-08-29T00:38:30.000Z</published>
    <updated>2023-11-18T03:59:46.209Z</updated>
    
    <content type="html"><![CDATA[<p>终于，Github 自己出 CI/CD 工具了，Whoa~</p><p><img src="/images/github-actions.png" /></p><p>鉴于 Gitlab 等早就有自动构建工具了，Github 已经晚了许多，那 Github Actions 能打得过吗？来上手试一下。</p><span id="more"></span><h2 id="为什么是自动部署-hexo">0. 为什么是自动部署 Hexo</h2><p>个人项目很少会用到 CI/CD 工具，那几乎唯一能用到自动部署的就是静态博客了。</p><p>而且折腾 Blog 是咱最喜欢的娱乐活动之一...<del>（写 Blog 不是）</del></p><h2 id="get-started">1. Get started</h2><p>先在 <a href="https://github.com/features/actions">GitHub Actions</a> 申请测试，然后等邮件通知。</p><p>咱等了不到一周的样子就收到了开通邮件。</p><p>当然，如果是体验 CI 的话，也可以选择其他的工具，比如 Travis CI。 这是之前写的介绍：<a href="https://xiaopc.org/2018/04/28/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E-travis-ci-%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5/">持续集成与 Travis CI 入门实践</a>，这篇结尾有个链接介绍如何部署 Hexo 的，可以参考。</p><h2 id="配置-hexo">2. 配置 Hexo</h2><p>如何安装及配置 Hexo 不是本文重点，请自行查询<a href="https://hexo.io/zh-cn/docs/">官方文档</a>。</p><p>建议先在本地跑通部署到 Github Pages 以后再继续。</p><p>配置完成后，把 <code>_config.yml</code> 里 <code>deploy</code> 的 repo 地址换成 SSH 地址（仓库页面 <strong>Clone and Download - Use SSH</strong> 里的地址），以便后面用密钥 push 到仓库。</p><h2 id="配置仓库及-key">3. 配置仓库及 key</h2><p>因为用户名 <code>username.github.io</code> 的 Github Pages 仓库只能部署 master 分支，而 Actions 的配置文件需要放在 master 分支（仅为个人猜测，因为放在其他分支出现了问题）。 所以需要再开一个仓库，放本地的源代码以及配置 Actions。</p><blockquote><p>2020-06-06 update: 若不使用 <code>username.github.io</code> 这个仓库，而是在其他名字的仓库使用 Pages 的话，是可以放在同一个仓库的不同分支上的。 Actions 配置文件仅在当前分支上会被触发（<a href="https://help.github.com/en/actions/reference/events-that-trigger-workflows#about-workflow-events">source</a>），因此开一个分支 <code>source</code> 里面放源码和 Actions 配置文件是可以的 。详见<a href="https://github.com/xiaopc/blog-en">英文版 Blog</a> 的操作。</p></blockquote><p>新建一个仓库，先不需要初始化。在本地生成一个 key：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">&quot;xiaopc@users.noreply.github.com&quot;</span> -f ~/.ssh/github-actions-deploy</span><br></pre></td></tr></table></figure><p>（也可以生成其他种类的 key，如果用上面的命令，需要修改一下用户名）</p><p>在新仓库的 <strong>Settings -&gt; Secrets</strong> 里添加刚刚生成的私钥，名称为 <code>ACTION_DEPLOY_KEY</code>。</p><p>然后在 Github Pages 的仓库，<strong>Settings -&gt; Deploy keys</strong> 添加刚刚生成的公钥，名称随意，但要勾选 <strong>Allow write access</strong>。</p><blockquote><p>2020-02-19 update: 如果 Github 账号有添加过 SSH key 是可以直接用的（那个 key 有所有仓库的权限），只需要添加 <code>ACTION_DEPLOY_KEY</code> 即可，不需要添加公钥。 但是为了安全起见呢，最好还是新建一个吧 (o=^•ェ•)o</p></blockquote><blockquote><p>2020-06-06 update: 同一个 Github 账号下不能添加两个相同的 SSH key，也就是说按照上面的方法添加的 key 无法再被添加到另外一个仓库，或是设为账号全局 key。</p></blockquote><h2 id="给源码仓库添加-actions-配置">4. 给源码仓库添加 Actions 配置</h2><p>可以在网页上 <strong>Actions</strong> 里编辑配置文件，也可以直接在本地目录添加直接 commit。</p><p>网页上可以看到，Github 提供了很多的模板：</p><p><img src="/images/github-actions-template.png" /></p><p>对于大部分应用的自动测试构建发布是足够的了，这个相比 Travis CI 降低了一点点门槛。</p><p>此外，Actions 还可以将动作打包发布到 <a href="https://github.com/marketplace?type=actions">Marketplace</a>，这是 Actions 的一个亮点，大大增加了复用能力。</p><p>不过要部署 Hexo，现在还没有打包的动作，需要自己写。</p><p>如果在网页编辑配置文件的话，选择 <code>Blank workflow</code>。 如果是在本地目录提交配置文件的话，将配置文件存至 <code>.github/workflows/*随便起名*.yml</code>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Build</span> <span class="string">and</span> <span class="string">Update</span> <span class="string">Github</span> <span class="string">Pages</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span> <span class="string">push</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line">      </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="number">10.</span><span class="string">x</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&quot;10.x&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Hexo</span> <span class="string">env</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">ACTION_DEPLOY_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ACTION_DEPLOY_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          # set up private key for deploy</span></span><br><span class="line"><span class="string">          mkdir -p ~/.ssh/</span></span><br><span class="line"><span class="string">          echo &quot;$ACTION_DEPLOY_KEY&quot; | tr -d &#x27;\r&#x27; &gt; ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">          chmod 600 ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span></span><br><span class="line"><span class="string">          # set git infomation</span></span><br><span class="line"><span class="string">          git config --global user.name &#x27;xiaopc&#x27;</span></span><br><span class="line"><span class="string">          git config --global user.email &#x27;xiaopc@users.noreply.github.com&#x27;</span></span><br><span class="line"><span class="string">          # install dependencies</span></span><br><span class="line"><span class="string">          npm i -g hexo-cli</span></span><br><span class="line"><span class="string">          npm i</span></span><br><span class="line"><span class="string">          # install pandoc</span></span><br><span class="line"><span class="string">          curl -s -L https://github.com/jgm/pandoc/releases/download/2.7.3/pandoc-2.7.3-linux.tar.gz | tar xvzf - -C $RUNNER_TOOL_CACHE/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          # add pandoc to PATH</span></span><br><span class="line"><span class="string">          export PATH=&quot;$PATH:$RUNNER_TOOL_CACHE/pandoc-2.7.3/bin&quot;</span></span><br><span class="line"><span class="string">          # publish</span></span><br><span class="line"><span class="string">          hexo generate &amp;&amp; hexo deploy</span></span><br></pre></td></tr></table></figure><p>对这个配置文件做几点说明：</p><ol start="0" type="1"><li><p>Actions 在早期测试时用的是 HCL 格式，而现在使用 YAML 配置，HCL 格式配置文件已被废弃。YAML 格式需要严格按照缩进。</p></li><li><p><code>on</code> 标注什么事件会触发这个 workflow，可以指定 branches，详情参考<a href="https://help.github.com/en/articles/events-that-trigger-workflows">文档</a>。</p></li><li><p><code>runs-on</code> 设置运行平台，目前有 Windows、Ubuntu、macOS，见<a href="https://help.github.com/en/articles/virtual-environments-for-github-actions">文档</a>。</p></li><li><p><code>uses</code> 是使用打包好的 action，可以通过 <code>with</code> 传参数。官方提供了一些 Git 基本操作和环境安装的包，也可以使用 Docker。</p></li><li><p><code>env</code> 可以设置这一步的环境变量，这一步设置的变量不会继承到下一步。刚才设置的私钥可以通过 <code>secrets</code> 模板变量获取到，具体见<a href="https://help.github.com/en/articles/virtual-environments-for-github-actions">文档</a>。另外直接将密钥 echo 出来会被打码 :)</p></li><li><p>在网页上保存私钥很可能会把 key 存成 CR-LF 换行模式的，而私钥文件要求 LF 模式，要用 <code>tr -d '\r'</code> 去掉回车符。（在这卡了几个小时(ノへ￣、)）[3]</p></li><li><p>Git 配置请更改为自己的。</p></li><li><p>由于咱用了 hexo-renderer-pandoc 引擎渲染 Markdown（LaTeX 公式支持更好），要装 pandoc。 但是没有 root 权限，只能手动装在其他目录。 官方的 toolkit 提供了一个缓存下载内容的工具 <a href="https://github.com/actions/toolkit/tree/master/packages/tool-cache">actions/tool-cache</a>，但是它仅在一个 workflow 里作用，so...</p></li><li><p>上面说的那个工具下载保存目录是 <code>$RUNNER_TOOL_CACHE</code>，这个环境变量没有在文档里，目前值为 <code>/opt/hostedtoolcache</code>。</p></li></ol><h2 id="开始构建">5. 开始构建</h2><p>配置好了，commit &amp; push 后在网页查看 build 状态：</p><p><img src="/images/github-actions-status.png" /></p><h2 id="尾声">6. 尾声</h2><p>和 Travis CI 相比，Actions 提供的平台更多，扩展性更强，但是缺少像 build cache 这些功能（build 的时候每次都要重新装依赖）。</p><p>虽然和它声称的 <strong>word-class CI/CD</strong> 还有一些距离，但是 Actions 已经比目前免费的工具高到不知道哪里了。</p><p>再加上它与 Github 的深度集成，以及 marketplace 仓库，可以发挥 CI/CD 的更多潜能。</p><p>对了，Actions 公开仓库免费，私仓按运行时间计费。</p><hr /><p>本文参考了：</p><p>[1] 通过 GitHub Actions 自动部署 Hexo <a href="https://gythialy.github.io/deploy-hexo-to-github-pages-via-github-actions/">https://gythialy.github.io/deploy-hexo-to-github-pages-via-github-actions/</a></p><p>[2] Deploying Hugo With Github Actions <a href="https://cupfullofcode.com/blog/2018/12/21/deploying-hugo-with-github-actions/">https://cupfullofcode.com/blog/2018/12/21/deploying-hugo-with-github-actions/</a></p><p>[3] .gitlab.ci.yml for SSH with private key <a href="https://gist.github.com/yannhowe/5ab1501156bd84c8ac261e2c17b8e3e0">https://gist.github.com/yannhowe/5ab1501156bd84c8ac261e2c17b8e3e0</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;终于，Github 自己出 CI/CD 工具了，Whoa~&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/github-actions.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;鉴于 Gitlab 等早就有自动构建工具了，Github 已经晚了许多，那 Github Actions 能打得过吗？来上手试一下。&lt;/p&gt;</summary>
    
    
    
    <category term="devops" scheme="https://xiaopc.org/categories/devops/"/>
    
    
  </entry>
  
  <entry>
    <title>backdrop-filter 来了</title>
    <link href="https://xiaopc.org/2019/08/13/backdrop-filter-%E6%9D%A5%E4%BA%86/"/>
    <id>https://xiaopc.org/2019/08/13/backdrop-filter-%E6%9D%A5%E4%BA%86/</id>
    <published>2019-08-13T11:45:46.000Z</published>
    <updated>2023-11-18T03:59:46.209Z</updated>
    
    <content type="html"><![CDATA[<p>近日，本平行宇宙中版本号最高的浏览器正式迎来了版本号 76，这一版本带来了地址栏简化、默认禁用 Flash 等特性。 但是，有一项更新甚至在官方 <a href="https://developers.google.com/web/updates/2019/07/nic76">更新说明</a> 中都没有提到。 那就是<code>backdrop-filter</code>已经脱离实验选项，成为正式支持的 CSS 属性。</p><span id="more"></span><h2 id="what">What</h2><p>那么什么是<code>backdrop-filter</code>，<code>backdrop-filter</code>有什么用呢？<del>接下来小编...</del></p><iframe height="468" style="width: 100%;" scrolling="no" title="eYOJWXq" src="//codepen.io/xiaopc/embed/eYOJWXq/?height=468&amp;theme-id=0&amp;default-tab=css,result" frameborder="no" allowtransparency="true" allowfullscreen="true">See the Pen <a href='https://codepen.io/xiaopc/pen/eYOJWXq/'>eYOJWXq</a> by xiaopc (<a href='https://codepen.io/xiaopc'><span class="citation" data-cites="xiaopc">@xiaopc</span></a>) on <a href='https://codepen.io'>CodePen</a>.</iframe><p>（如果上面这个例子没有效果，说明你得升级浏览器了）</p><p>如果浏览过 Apple 的产品页面，应该会发现在 Safari 下的导航条有着和 iOS 7+ 一样的实时模糊效果，这就是<code>backdrop-filter</code>的作用了。</p><p>下图就是新 Mac Pro <del>（刨丝器）</del>页面的效果：</p><p><img src="/images/backdrop-filter-browser-test.png" /></p><h2 id="how">How</h2><p><code>backdrop-filter</code>不是只有模糊这一个效果，</p><blockquote><p><code>backdrop-filter</code> CSS 属性可以让你为一个元素后面区域添加图形效果（如模糊或颜色偏移）。 因为它适用于元素背后的所有元素，为了看到效果，必须使元素或其背景至少部分透明。[1]</p></blockquote><p>属性示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* &lt;filter-function&gt; 过滤器函数 */</span></span><br><span class="line">backdrop-<span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">2px</span>);</span><br><span class="line">backdrop-<span class="attribute">filter</span>: <span class="built_in">brightness</span>(<span class="number">60%</span>);</span><br><span class="line">backdrop-<span class="attribute">filter</span>: <span class="built_in">contrast</span>(<span class="number">40%</span>);</span><br><span class="line">backdrop-<span class="attribute">filter</span>: <span class="built_in">drop-shadow</span>(<span class="number">4px</span> <span class="number">4px</span> <span class="number">10px</span> blue);</span><br><span class="line">backdrop-<span class="attribute">filter</span>: <span class="built_in">grayscale</span>(<span class="number">30%</span>);</span><br><span class="line">backdrop-<span class="attribute">filter</span>: <span class="built_in">hue-rotate</span>(<span class="number">120deg</span>);</span><br><span class="line">backdrop-<span class="attribute">filter</span>: <span class="built_in">invert</span>(<span class="number">70%</span>);</span><br><span class="line">backdrop-<span class="attribute">filter</span>: <span class="built_in">opacity</span>(<span class="number">20%</span>);</span><br><span class="line">backdrop-<span class="attribute">filter</span>: <span class="built_in">sepia</span>(<span class="number">90%</span>);</span><br><span class="line">backdrop-<span class="attribute">filter</span>: <span class="built_in">saturate</span>(<span class="number">80%</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* SVG 过滤器 */</span></span><br><span class="line">backdrop-<span class="attribute">filter</span>: <span class="built_in">url</span>(<span class="string">commonfilters.svg#filter</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 多重过滤器 */</span></span><br><span class="line">backdrop-<span class="attribute">filter</span>: <span class="built_in">url</span>(<span class="string">filters.svg#filter</span>) <span class="built_in">blur</span>(<span class="number">4px</span>) <span class="built_in">saturate</span>(<span class="number">150%</span>);</span><br></pre></td></tr></table></figure><h2 id="why">Why</h2><p>来看一下现在的浏览器支持情况。</p><p><img src="/images/backdrop-filter-caniuse.png" /></p><p>Safari 是最早支持的（目前还要加 <code>-webkit-</code> 前缀），Edge 也很早就支持了（但是为什么也用 <code>-webkit-</code> 前缀啊）。</p><p>尽管如此，当时能够使用<code>backdrop-filter</code>的流量占比仍然不高（实验室特性不算，当时存在着一些 bug）。</p><p>而现在 Chrome 正式支持后，基本就覆盖了大多数流量。 （Firefox 已经在 Consideration 中了，实现的 bug 也解决了 2/3）</p><h2 id="题外">题外</h2><p>用 Chrome 打开刨丝器那页时，只有集显的 6200U 的 CPU 使用率最高达到了 85%+5%...</p><p>新特性带给浏览器更强大的图形处理能力，也带来了更高的性能要求啊。</p><hr /><p>本文参考了：</p><p>[1] backdrop-filter - CSS（层叠样式表） <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/backdrop-filter">https://developer.mozilla.org/zh-CN/docs/Web/CSS/backdrop-filter</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;近日，本平行宇宙中版本号最高的浏览器正式迎来了版本号 76，这一版本带来了地址栏简化、默认禁用 Flash 等特性。 但是，有一项更新甚至在官方 &lt;a href=&quot;https://developers.google.com/web/updates/2019/07/nic76&quot;&gt;更新说明&lt;/a&gt; 中都没有提到。 那就是&lt;code&gt;backdrop-filter&lt;/code&gt;已经脱离实验选项，成为正式支持的 CSS 属性。&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://xiaopc.org/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>webpack 数据 Mock 方法整理</title>
    <link href="https://xiaopc.org/2019/07/15/webpack-%E6%95%B0%E6%8D%AE-mock-%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86/"/>
    <id>https://xiaopc.org/2019/07/15/webpack-%E6%95%B0%E6%8D%AE-mock-%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86/</id>
    <published>2019-07-15T01:08:02.000Z</published>
    <updated>2023-11-18T03:59:46.209Z</updated>
    
    <content type="html"><![CDATA[<p>前后端分离开发中，少不了模拟真实后端接口的 mocker，这里就谈谈之前在 Mock 时踩过的坑吧。</p><span id="more"></span><h2 id="mock.js">Mock.js</h2><p>首先要有数据源，Mock.js 提供了假数据生成的功能。</p><p>但是</p><p>在网上搜索到的 Mock.js 教程要么是旧版的（Mock.js 原来是通过拦截 axios 等库的请求来实现的），要么就是以下这种方法：</p><blockquote><ol type="1"><li>建立一个引入了 <code>mockjs</code> 的 mocker</li><li>修改 <code>webpack.dev.conf.js</code>，添加 <code>before</code> 钩子直接引入这个 mocker：</li></ol></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="attr">before</span>: <span class="built_in">require</span>(<span class="string">&#x27;../mock&#x27;</span>), <span class="comment">//引入 mock/index.js</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>而这些教程给的 mocker 大致是这样的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span>(<span class="params">app</span>)&#123;</span><br><span class="line">    app.<span class="title function_">get</span>(<span class="string">&#x27;/...&#x27;</span>, <span class="keyword">function</span> (<span class="params">rep, res</span>) &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        res.<span class="title function_">json</span>(<span class="title class_">Mock</span>.<span class="title function_">mock</span>(...));</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那 <code>rep</code> 是干什么用的呢？（而且应该是 <em>req</em>uest 吧）</p><p>如果把它 <code>console.log</code> 出来会发现这是请求对象，但是没有处理请求的内容（POST）。</p><p>连请求内容都没有，还有什么用啊？连登录验证都 mock 不出来，实在是没什么实用性。</p><h2 id="webpack-api-mocker">webpack-api-mocker</h2><p>当然，这个就能解决问题了。</p><p>webpck.dev.config.js <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> apiMocker = <span class="built_in">require</span>(<span class="string">&#x27;webpack-api-mocker&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="title function_">before</span>(<span class="params">app</span>) &#123;</span><br><span class="line">      <span class="title function_">apiMocker</span>(app, path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;../mock/index.js&#x27;</span>), &#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>mocker 还是那个 mocker，现在 「<code>rep</code>」就有 <code>body</code> <code>query</code> <code>params</code> 方法了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="string">&#x27;GET /api/check&#x27;</span>: <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (req.<span class="property">query</span>.<span class="property">username</span> == <span class="string">&quot;admin&quot;</span>) &#123;</span><br><span class="line">            res.<span class="title function_">send</span>(&#123;...&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;POST /login&#x27;</span>: <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (req.<span class="property">body</span>.<span class="property">username</span> == <span class="string">&quot;admin&quot;</span>) &#123;</span><br><span class="line">            res.<span class="title function_">send</span>(&#123;...&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>webpack-api-mocker</code> 还有一点好，它是支持热更新的。</p><h2 id="cookie-parser">cookie-parser</h2><p>webpack 的 devServer 其实是一个 express 服务，那么用法也就是 express。</p><p>在登录模拟时也要模拟 cookie，express 设置 cookie 就很简单：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.<span class="title function_">cookie</span>(name, value [, options]);</span><br></pre></td></tr></table></figure><p>那在读取 cookie 时就需要 <code>cookie-parser</code>： <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cookieParser = <span class="built_in">require</span>(<span class="string">&#x27;cookie-parser&#x27;</span>);</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="title function_">before</span>(<span class="params">app</span>) &#123;</span><br><span class="line">    app.<span class="title function_">use</span>(<span class="title function_">cookiePareser</span>())</span><br><span class="line">    <span class="title function_">apiMocker</span>(app, path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;../mock/index.js&#x27;</span>), &#123;&#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><h2 id="再闲叨叨">再闲叨叨</h2><p>React 生态真的是完善的多，比如 roadhog 等等都自带 mock。</p><p>再看 Vue.js，没一个框架做了 mock（如果有的话请留言）。</p><p>但是不论是之前的 License 风波，还是 JSX 这种怪异玩意，</p><p>很难喜欢上 React 啊。</p><hr /><p>本文参考了：</p><p>[1] 关于几种数据Mock的手段 - worldzhao <a href="https://worldzhao.github.io/2018/10/20/webpack-dev-server/">https://worldzhao.github.io/2018/10/20/webpack-dev-server/</a></p><p>[2] Express cookie-parser middleware <a href="https://expressjs.com/en/resources/middleware/cookie-parser.html">https://expressjs.com/en/resources/middleware/cookie-parser.html</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;前后端分离开发中，少不了模拟真实后端接口的 mocker，这里就谈谈之前在 Mock 时踩过的坑吧。&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://xiaopc.org/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>旧机子改机顶盒，没那么简单</title>
    <link href="https://xiaopc.org/2019/05/18/%E6%97%A7%E6%9C%BA%E5%AD%90%E6%94%B9%E6%9C%BA%E9%A1%B6%E7%9B%92%EF%BC%8C%E6%B2%A1%E9%82%A3%E4%B9%88%E7%AE%80%E5%8D%95/"/>
    <id>https://xiaopc.org/2019/05/18/%E6%97%A7%E6%9C%BA%E5%AD%90%E6%94%B9%E6%9C%BA%E9%A1%B6%E7%9B%92%EF%BC%8C%E6%B2%A1%E9%82%A3%E4%B9%88%E7%AE%80%E5%8D%95/</id>
    <published>2019-05-18T12:23:21.000Z</published>
    <updated>2023-11-18T03:59:46.213Z</updated>
    
    <content type="html"><![CDATA[<p>有台老机子，3220 的 U，4+4 DDR3 1600，Mini-ITX 的小板（B75N），小机箱，一直在吃灰。 最近因为电信的机顶盒总是不稳定，而且点播等等功能还要另收费，就琢磨着把这台机子改成机顶盒用。</p><p>结果呢？Too young, too simple!</p><span id="more"></span><h2 id="为什么要这么用买个盒子不行吗">为什么要这么用，买个盒子不行吗？</h2><p>国内销售的盒子，由于广电对播控平台的要求，只能装那几个众所周知的视频平台。</p><p>那不能 root 吗？</p><p>国产盒子的 root 的麻烦程度快比手机难受了，而且那些 xx 精灵真的一言难尽啊。 （其实可以买电信/移动的定制盒子然后 adb，据说体验还行，不过怕两个盒子的遥控乱掉 orz）</p><p>那国外盒子呢？</p><p>tb 上转了一圈，没有看的上的...(关键词“外贸盒子”，一水的刷好评的)</p><p>那海淘 Android TV？</p><p>为啥要花那个钱啊...（不过小米盒子国际版是能看 Netflix 的）</p><h2 id="准备">准备</h2><p>先装好 Windows，换了 SSD，速度还是可以的。（嘤特尔牙膏++）</p><p>电视操作还是需要遥控器的，tb 上买了个飞鼠。wow, awesome~（其实体验真不如电视的动感遥控器）</p><p>然后就是考虑怎么上 Android。 因为国内在线视频网站的播放体验被人为削弱了，桌面版应用在电视上看着很难受，UWP 应用... 只有爱奇艺还没弃坑吧。</p><p>虚拟机？模拟器？蓝叠？这个机子能带的起来就鬼了。（蓝叠卡的要命，连进播放界面都卡死）</p><p>这个 U 的核芯显卡是 HD Graphics 2500，HDMI 是 1.0 的，输出最多 2k。然而电视是 4k 的... 就将就吧。</p><h2 id="凤凰phoenix-os">凤凰（Phoenix） OS</h2><p>国内桌面安卓做的比较成熟的（好几年没倒就算）也就凤凰了。</p><p>下载，硬盘安装，一气呵成。</p><p>凤凰 OS 的硬盘安装是不划分区的，分区是以镜像文件放到任意分区加载的，这一点好。</p><p>重启进入，当贝市场安装（广告费结一下），云视听系列安装。</p><p>然后就遇到第一个问题了。</p><h4 id="hdmi-没声音">HDMI 没声音</h4><p>是的，如果用 HDMI 连电视，是没有音频输出的。</p><p>原因大概是 pcm 设备默认配置的是除了主输出以外全禁用...</p><p>解决： 1. 在控制台（先开启 root，控制台用自带的或者 SSH 工具都行）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su</span><br><span class="line">alsa_amixer contents</span><br></pre></td></tr></table></figure><p>记一下名称里有 HDMI 的设备 pcm 号。</p><ol start="2" type="1"><li>删除 <code>/dev/snd/</code> 里 <code>pcm</code> 开头，刚才记录的 pcm 号结尾的设备文件，然后在控制台里杀掉音频服务进程：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">killall audioserver</span><br></pre></td></tr></table></figure><p>看现在有声音了没？如果有就下一步，没有的话就说明...删错了，重来吧...</p><p>（我的是 <code>pcmC0D3p</code>）</p><ol start="3" type="1"><li>刚才删除设备文件和杀服务的命令，加到开机启动文件 <code>/system/etc/init.sh</code> 里初始化声卡（<code>alsa_amixer</code> 那几行）的后面。</li></ol><p>这就是第一个问题了。</p><h4 id="更换启动器">更换启动器</h4><p>凤凰的桌面是给 PC 用的，电视上几乎看不清。</p><p>那换成第三方电视启动器，例如当贝桌面？（结广告费x2）</p><p>答案是不行的，系统屏蔽了的。</p><p>解决： 1. 下载启动器的 apk，建个文件夹把 apk 放里面，在里面建立 <code>lib/arm</code> 两级目录，把 apk 包里的 <code>lib/armeabi/libDecryptNative.so'</code> 解压到这。</p><ol start="2" type="1"><li><p>把那个文件夹拷到 <code>/system/app</code> 里，文件夹权限 755，文件权限 644。这一步已经装好了。</p></li><li><p>如果启动器不能全屏，修改 <code>/data/system/app_window_settings.xml</code> 里对应包名的 <code>windowState</code> 属性为 <code>5</code>。</p></li><li><p>用幸运破解器把文件管理器冻结掉。</p></li></ol><h4 id="为什么卸载了">为什么卸载了</h4><p>自带的广告足够恶心，真·牛皮癣。</p><p>只要一动广告那个包（凤凰VIP）就开不到机了...</p><h2 id="技德remix-os">技德（Remix） OS</h2><p>Remix OS 已经凉凉了。（不过这几天看起来要回光返照？）</p><p>官网已经没有下载地址了，能下载的地址在 https://www.fosshub.com/Remix-OS.html 。</p><p>就 UI 来讲，觉得比凤凰好一丢丢。</p><h4 id="更换启动器-1">更换启动器</h4><p>也是声称不能换启动器的，但是却自带了个 Lawnchair？这是什么操作？</p><p>Remix OS 就比较简单，直接冻结当前启动器就行了。（然后就切到 Lawnchair 了）</p><h4 id="hdmi-没声音...">HDMI 没声音...</h4><p>对，这几乎是 Android x86 基本都有的问题。</p><p>解决方法一样，只是...</p><p>Remix OS 启动分区没有写权限...</p><p>解决：找到 grub.cfg（在 EFI 分区），在引导项后面加 <code>REMOUNT_RW=1</code></p><h4 id="为什么卸载了x2">为什么卸载了x2</h4><p>由于已经凉了，系统内核有点旧，OpenGL 也有点旧，好几个视频应用会出问题。（当然不能排除是这个核显的锅）</p><p>云视听极光无法播放但是快进以后可以，奇异果、酷喵、电视猫和 Youtube 无法播放，云视听小电视没问题。</p><p>网页播放没问题，但是网页播放为啥要装 Android？</p><h2 id="android-x86">Android x86</h2><p>直接翻车。</p><p>Android x86 已经到 8.1 了，然而硬盘安装器只支持到两年前的版本...</p><p>甚至虚拟机安装卡内核日志...</p><h2 id="fydeos">FydeOS</h2><p>这是 ChromiumOS，支持装 apk。</p><p>但是 Android 启动器就别想了... 桌面基本没用...</p><p>只支持硬盘划分区安装...</p><p>Android 的实现有点奇怪，云视听极光播放页是被选中的，然后满屏蓝色的 active 状态框...</p><h2 id="总结">总结</h2><p>没一个能打的啊，怕是只能用 TNT 了吧（</p><hr /><p>参考链接</p><p>[1] 刚刚装了凤凰OS，系统没有声音怎么办？？ http://bbs.phoenixstudio.org/cn/read.php?tid=16959&amp;fid=12</p><p>[2] 装上凤凰os，使用正常就是没声音 http://bbs.phoenixstudio.org/cn/read.php?tid=15196&amp;fid=12</p><p>[3] PhoenixOS 如何安装第三方桌面 http://bbs.phoenixstudio.org/cn/read.php?tid=26250&amp;fid=12</p><p>[4] 请求帮助：root权限（Remixos） http://bbs.phoenixstudio.org/cn/read.php?tid=25689&amp;fid=12</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;有台老机子，3220 的 U，4+4 DDR3 1600，Mini-ITX 的小板（B75N），小机箱，一直在吃灰。 最近因为电信的机顶盒总是不稳定，而且点播等等功能还要另收费，就琢磨着把这台机子改成机顶盒用。&lt;/p&gt;
&lt;p&gt;结果呢？Too young, too simple!&lt;/p&gt;</summary>
    
    
    
    <category term="其他" scheme="https://xiaopc.org/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>Flarum 0.1.0-beta8.1 魔改之邮件</title>
    <link href="https://xiaopc.org/2019/03/11/flarum-0-1-0-beta8-1-%E9%AD%94%E6%94%B9%E4%B9%8B%E9%82%AE%E4%BB%B6/"/>
    <id>https://xiaopc.org/2019/03/11/flarum-0-1-0-beta8-1-%E9%AD%94%E6%94%B9%E4%B9%8B%E9%82%AE%E4%BB%B6/</id>
    <published>2019-03-11T04:23:37.000Z</published>
    <updated>2023-11-18T03:59:46.209Z</updated>
    
    <content type="html"><![CDATA[<h2 id="取消注册邮件验证">取消注册邮件验证</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require isaced/flarum-ext-email-verification-switch</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="国内邮件推送平台">国内邮件推送平台？</h2><p>暂时没发现有支持的插件。</p><h2 id="将邮件格式由纯文本改为-html">将邮件格式由纯文本改为 HTML</h2><p><a href="http://discuss.flarum.org.cn/d/862">修改flarum能发送html邮件</a></p><ol type="1"><li>将 <code>vendor/flarum/core/src/Api/Controller/SendConfirmationEmailController.php</code> 90 行的</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">$this</span>-&gt;mailer-&gt;<span class="title function_ invoke__">raw</span>(<span class="variable">$body</span>, // 其后省略</span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">$this</span>-&gt;mailer-&gt;<span class="title function_ invoke__">send</span>([<span class="string">&#x27;html&#x27;</span> =&gt; <span class="variable">$body</span>], [], </span><br></pre></td></tr></table></figure><ol start="2" type="1"><li>将 <code>vendor/illuminate/mail/Mailer.php</code> 213 行起的</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$data</span>[<span class="string">&#x27;message&#x27;</span>] = <span class="variable">$message</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">createMessage</span>();</span><br><span class="line"><span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">addContent</span>(<span class="variable">$message</span>, <span class="variable">$view</span>, <span class="variable">$plain</span>, <span class="variable">$raw</span>, <span class="variable">$data</span>);</span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$message</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">createMessage</span>();</span><br><span class="line"><span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">addContent</span>(<span class="variable">$message</span>, <span class="variable">$view</span>, <span class="variable">$plain</span>, <span class="variable">$raw</span>, <span class="variable">$data</span>);</span><br><span class="line"><span class="variable">$data</span>[<span class="string">&#x27;message&#x27;</span>] = <span class="variable">$message</span>;</span><br></pre></td></tr></table></figure><ol start="3" type="1"><li>还是 <code>Mailer.php</code>，将 315 行（左右）的 <code>$message-&gt;$method($raw, 'text/plain')</code> 改为 <code>$message-&gt;$method($raw, 'text/html')</code></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;取消注册邮件验证&quot;&gt;取消注册邮件验证&lt;/h2&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;composer require isaced/flarum-ext-email-verification-switch&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="后端" scheme="https://xiaopc.org/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
  </entry>
  
</feed>
